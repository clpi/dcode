
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  username: string
  password: string
  name: string
  image: string | null
  created: Date
  updatedAt: Date
  colorschemeId: string
  siteMode: SiteMode
}

/**
 * Model Problem
 * 
 */
export type Problem = {
  id: string
  userId: string
  desc: string
  language: Language | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Requirement
 * 
 */
export type Requirement = {
  id: string
  userId: string
  createdAt: Date
  updatedAt: Date
  description: string
}

/**
 * Model Tag
 * 
 */
export type Tag = {
  id: string
  name: string
}

/**
 * Model RequirementTag
 * 
 */
export type RequirementTag = {
  id: string
  requirementId: string
  tagId: string
}

/**
 * Model ProblemTag
 * 
 */
export type ProblemTag = {
  id: string
  problemId: string
  tagId: string
}

/**
 * Model Solution
 * 
 */
export type Solution = {
  id: string
  userId: string
  problemId: string
  markedBest: boolean
  language: Language
  content: string
  publish: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model SolutionVote
 * 
 */
export type SolutionVote = {
  id: string
  solutionId: string
  userId: string
  value: VoteValue
  comment: string | null
  identifiers: SolutionIdentifier[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ProblemVote
 * 
 */
export type ProblemVote = {
  id: string
  problemId: string
  userId: string
  value: VoteValue
  comment: string | null
  identifiers: SolutionIdentifier[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model RequirementVote
 * 
 */
export type RequirementVote = {
  id: string
  requirementId: string
  userId: string
  value: VoteValue
  comment: string | null
  identifiers: SolutionIdentifier[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Colorscheme
 * 
 */
export type Colorscheme = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const SiteMode: {
  Light: 'Light',
  Dark: 'Dark'
};

export type SiteMode = (typeof SiteMode)[keyof typeof SiteMode]


export const Language: {
  Rust: 'Rust',
  Zig: 'Zig',
  Nim: 'Nim',
  Cpp: 'Cpp',
  C: 'C',
  JavaScript: 'JavaScript',
  TypeScript: 'TypeScript',
  Python: 'Python'
};

export type Language = (typeof Language)[keyof typeof Language]


export const VoteValue: {
  Like: 'Like',
  Dislike: 'Dislike'
};

export type VoteValue = (typeof VoteValue)[keyof typeof VoteValue]


export const SolutionIdentifier: {
  Unique: 'Unique',
  Efficient: 'Efficient',
  Naive: 'Naive',
  BruteForce: 'BruteForce',
  Performant: 'Performant'
};

export type SolutionIdentifier = (typeof SolutionIdentifier)[keyof typeof SolutionIdentifier]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.problem`: Exposes CRUD operations for the **Problem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problem.findMany()
    * ```
    */
  get problem(): Prisma.ProblemDelegate<GlobalReject>;

  /**
   * `prisma.requirement`: Exposes CRUD operations for the **Requirement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Requirements
    * const requirements = await prisma.requirement.findMany()
    * ```
    */
  get requirement(): Prisma.RequirementDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.requirementTag`: Exposes CRUD operations for the **RequirementTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequirementTags
    * const requirementTags = await prisma.requirementTag.findMany()
    * ```
    */
  get requirementTag(): Prisma.RequirementTagDelegate<GlobalReject>;

  /**
   * `prisma.problemTag`: Exposes CRUD operations for the **ProblemTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemTags
    * const problemTags = await prisma.problemTag.findMany()
    * ```
    */
  get problemTag(): Prisma.ProblemTagDelegate<GlobalReject>;

  /**
   * `prisma.solution`: Exposes CRUD operations for the **Solution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Solutions
    * const solutions = await prisma.solution.findMany()
    * ```
    */
  get solution(): Prisma.SolutionDelegate<GlobalReject>;

  /**
   * `prisma.solutionVote`: Exposes CRUD operations for the **SolutionVote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SolutionVotes
    * const solutionVotes = await prisma.solutionVote.findMany()
    * ```
    */
  get solutionVote(): Prisma.SolutionVoteDelegate<GlobalReject>;

  /**
   * `prisma.problemVote`: Exposes CRUD operations for the **ProblemVote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemVotes
    * const problemVotes = await prisma.problemVote.findMany()
    * ```
    */
  get problemVote(): Prisma.ProblemVoteDelegate<GlobalReject>;

  /**
   * `prisma.requirementVote`: Exposes CRUD operations for the **RequirementVote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequirementVotes
    * const requirementVotes = await prisma.requirementVote.findMany()
    * ```
    */
  get requirementVote(): Prisma.RequirementVoteDelegate<GlobalReject>;

  /**
   * `prisma.colorscheme`: Exposes CRUD operations for the **Colorscheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colorschemes
    * const colorschemes = await prisma.colorscheme.findMany()
    * ```
    */
  get colorscheme(): Prisma.ColorschemeDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.6.0
   * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Problem: 'Problem',
    Requirement: 'Requirement',
    Tag: 'Tag',
    RequirementTag: 'RequirementTag',
    ProblemTag: 'ProblemTag',
    Solution: 'Solution',
    SolutionVote: 'SolutionVote',
    ProblemVote: 'ProblemVote',
    RequirementVote: 'RequirementVote',
    Colorscheme: 'Colorscheme'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    problems: number
    solutions: number
    requirements: number
    problemVotes: number
    solutionVotes: number
    requirementVotes: number
  }

  export type UserCountOutputTypeSelect = {
    problems?: boolean
    solutions?: boolean
    requirements?: boolean
    problemVotes?: boolean
    solutionVotes?: boolean
    requirementVotes?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProblemCountOutputType
   */


  export type ProblemCountOutputType = {
    solutions: number
    tags: number
    votes: number
  }

  export type ProblemCountOutputTypeSelect = {
    solutions?: boolean
    tags?: boolean
    votes?: boolean
  }

  export type ProblemCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProblemCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProblemCountOutputType
    : S extends undefined
    ? never
    : S extends ProblemCountOutputTypeArgs
    ?'include' extends U
    ? ProblemCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProblemCountOutputType ?ProblemCountOutputType [P]
  : 
     never
  } 
    : ProblemCountOutputType
  : ProblemCountOutputType




  // Custom InputTypes

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProblemCountOutputType
     * 
    **/
    select?: ProblemCountOutputTypeSelect | null
  }



  /**
   * Count Type RequirementCountOutputType
   */


  export type RequirementCountOutputType = {
    tags: number
    votes: number
  }

  export type RequirementCountOutputTypeSelect = {
    tags?: boolean
    votes?: boolean
  }

  export type RequirementCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RequirementCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RequirementCountOutputType
    : S extends undefined
    ? never
    : S extends RequirementCountOutputTypeArgs
    ?'include' extends U
    ? RequirementCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof RequirementCountOutputType ?RequirementCountOutputType [P]
  : 
     never
  } 
    : RequirementCountOutputType
  : RequirementCountOutputType




  // Custom InputTypes

  /**
   * RequirementCountOutputType without action
   */
  export type RequirementCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RequirementCountOutputType
     * 
    **/
    select?: RequirementCountOutputTypeSelect | null
  }



  /**
   * Count Type TagCountOutputType
   */


  export type TagCountOutputType = {
    requirements: number
    problems: number
  }

  export type TagCountOutputTypeSelect = {
    requirements?: boolean
    problems?: boolean
  }

  export type TagCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TagCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TagCountOutputType
    : S extends undefined
    ? never
    : S extends TagCountOutputTypeArgs
    ?'include' extends U
    ? TagCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof TagCountOutputType ?TagCountOutputType [P]
  : 
     never
  } 
    : TagCountOutputType
  : TagCountOutputType




  // Custom InputTypes

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     * 
    **/
    select?: TagCountOutputTypeSelect | null
  }



  /**
   * Count Type SolutionCountOutputType
   */


  export type SolutionCountOutputType = {
    votes: number
  }

  export type SolutionCountOutputTypeSelect = {
    votes?: boolean
  }

  export type SolutionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SolutionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SolutionCountOutputType
    : S extends undefined
    ? never
    : S extends SolutionCountOutputTypeArgs
    ?'include' extends U
    ? SolutionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SolutionCountOutputType ?SolutionCountOutputType [P]
  : 
     never
  } 
    : SolutionCountOutputType
  : SolutionCountOutputType




  // Custom InputTypes

  /**
   * SolutionCountOutputType without action
   */
  export type SolutionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SolutionCountOutputType
     * 
    **/
    select?: SolutionCountOutputTypeSelect | null
  }



  /**
   * Count Type ColorschemeCountOutputType
   */


  export type ColorschemeCountOutputType = {
    users: number
  }

  export type ColorschemeCountOutputTypeSelect = {
    users?: boolean
  }

  export type ColorschemeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ColorschemeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ColorschemeCountOutputType
    : S extends undefined
    ? never
    : S extends ColorschemeCountOutputTypeArgs
    ?'include' extends U
    ? ColorschemeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ColorschemeCountOutputType ?ColorschemeCountOutputType [P]
  : 
     never
  } 
    : ColorschemeCountOutputType
  : ColorschemeCountOutputType




  // Custom InputTypes

  /**
   * ColorschemeCountOutputType without action
   */
  export type ColorschemeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ColorschemeCountOutputType
     * 
    **/
    select?: ColorschemeCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    name: string | null
    image: string | null
    created: Date | null
    updatedAt: Date | null
    colorschemeId: string | null
    siteMode: SiteMode | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    name: string | null
    image: string | null
    created: Date | null
    updatedAt: Date | null
    colorschemeId: string | null
    siteMode: SiteMode | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    name: number
    image: number
    created: number
    updatedAt: number
    colorschemeId: number
    siteMode: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    name?: true
    image?: true
    created?: true
    updatedAt?: true
    colorschemeId?: true
    siteMode?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    name?: true
    image?: true
    created?: true
    updatedAt?: true
    colorschemeId?: true
    siteMode?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    name?: true
    image?: true
    created?: true
    updatedAt?: true
    colorschemeId?: true
    siteMode?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    name: string
    image: string | null
    created: Date
    updatedAt: Date
    colorschemeId: string
    siteMode: SiteMode
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    image?: boolean
    created?: boolean
    updatedAt?: boolean
    colorschemeId?: boolean
    siteMode?: boolean
    colorscheme?: boolean | ColorschemeArgs
    problems?: boolean | ProblemFindManyArgs
    solutions?: boolean | SolutionFindManyArgs
    requirements?: boolean | RequirementFindManyArgs
    problemVotes?: boolean | ProblemVoteFindManyArgs
    solutionVotes?: boolean | SolutionVoteFindManyArgs
    requirementVotes?: boolean | RequirementVoteFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    colorscheme?: boolean | ColorschemeArgs
    problems?: boolean | ProblemFindManyArgs
    solutions?: boolean | SolutionFindManyArgs
    requirements?: boolean | RequirementFindManyArgs
    problemVotes?: boolean | ProblemVoteFindManyArgs
    solutionVotes?: boolean | SolutionVoteFindManyArgs
    requirementVotes?: boolean | RequirementVoteFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'colorscheme'
        ? ColorschemeGetPayload<S['include'][P]> :
        P extends 'problems'
        ? Array < ProblemGetPayload<S['include'][P]>>  :
        P extends 'solutions'
        ? Array < SolutionGetPayload<S['include'][P]>>  :
        P extends 'requirements'
        ? Array < RequirementGetPayload<S['include'][P]>>  :
        P extends 'problemVotes'
        ? Array < ProblemVoteGetPayload<S['include'][P]>>  :
        P extends 'solutionVotes'
        ? Array < SolutionVoteGetPayload<S['include'][P]>>  :
        P extends 'requirementVotes'
        ? Array < RequirementVoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'colorscheme'
        ? ColorschemeGetPayload<S['select'][P]> :
        P extends 'problems'
        ? Array < ProblemGetPayload<S['select'][P]>>  :
        P extends 'solutions'
        ? Array < SolutionGetPayload<S['select'][P]>>  :
        P extends 'requirements'
        ? Array < RequirementGetPayload<S['select'][P]>>  :
        P extends 'problemVotes'
        ? Array < ProblemVoteGetPayload<S['select'][P]>>  :
        P extends 'solutionVotes'
        ? Array < SolutionVoteGetPayload<S['select'][P]>>  :
        P extends 'requirementVotes'
        ? Array < RequirementVoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    colorscheme<T extends ColorschemeArgs = {}>(args?: Subset<T, ColorschemeArgs>): CheckSelect<T, Prisma__ColorschemeClient<Colorscheme | null >, Prisma__ColorschemeClient<ColorschemeGetPayload<T> | null >>;

    problems<T extends ProblemFindManyArgs = {}>(args?: Subset<T, ProblemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Problem>>, PrismaPromise<Array<ProblemGetPayload<T>>>>;

    solutions<T extends SolutionFindManyArgs = {}>(args?: Subset<T, SolutionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Solution>>, PrismaPromise<Array<SolutionGetPayload<T>>>>;

    requirements<T extends RequirementFindManyArgs = {}>(args?: Subset<T, RequirementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Requirement>>, PrismaPromise<Array<RequirementGetPayload<T>>>>;

    problemVotes<T extends ProblemVoteFindManyArgs = {}>(args?: Subset<T, ProblemVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProblemVote>>, PrismaPromise<Array<ProblemVoteGetPayload<T>>>>;

    solutionVotes<T extends SolutionVoteFindManyArgs = {}>(args?: Subset<T, SolutionVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SolutionVote>>, PrismaPromise<Array<SolutionVoteGetPayload<T>>>>;

    requirementVotes<T extends RequirementVoteFindManyArgs = {}>(args?: Subset<T, RequirementVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequirementVote>>, PrismaPromise<Array<RequirementVoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Problem
   */


  export type AggregateProblem = {
    _count: ProblemCountAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  export type ProblemMinAggregateOutputType = {
    id: string | null
    userId: string | null
    desc: string | null
    language: Language | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    desc: string | null
    language: Language | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemCountAggregateOutputType = {
    id: number
    userId: number
    desc: number
    language: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemMinAggregateInputType = {
    id?: true
    userId?: true
    desc?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemMaxAggregateInputType = {
    id?: true
    userId?: true
    desc?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemCountAggregateInputType = {
    id?: true
    userId?: true
    desc?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemAggregateArgs = {
    /**
     * Filter which Problem to aggregate.
     * 
    **/
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemMaxAggregateInputType
  }

  export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem[P]>
      : GetScalarType<T[P], AggregateProblem[P]>
  }




  export type ProblemGroupByArgs = {
    where?: ProblemWhereInput
    orderBy?: Enumerable<ProblemOrderByWithAggregationInput>
    by: Array<ProblemScalarFieldEnum>
    having?: ProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCountAggregateInputType | true
    _min?: ProblemMinAggregateInputType
    _max?: ProblemMaxAggregateInputType
  }


  export type ProblemGroupByOutputType = {
    id: string
    userId: string
    desc: string
    language: Language | null
    createdAt: Date
    updatedAt: Date
    _count: ProblemCountAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Promise<
    Array<
      PickArray<ProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    desc?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solutions?: boolean | SolutionFindManyArgs
    tags?: boolean | ProblemTagFindManyArgs
    votes?: boolean | ProblemVoteFindManyArgs
    _count?: boolean | ProblemCountOutputTypeArgs
  }

  export type ProblemInclude = {
    user?: boolean | UserArgs
    solutions?: boolean | SolutionFindManyArgs
    tags?: boolean | ProblemTagFindManyArgs
    votes?: boolean | ProblemVoteFindManyArgs
    _count?: boolean | ProblemCountOutputTypeArgs
  }

  export type ProblemGetPayload<
    S extends boolean | null | undefined | ProblemArgs,
    U = keyof S
      > = S extends true
        ? Problem
    : S extends undefined
    ? never
    : S extends ProblemArgs | ProblemFindManyArgs
    ?'include' extends U
    ? Problem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'solutions'
        ? Array < SolutionGetPayload<S['include'][P]>>  :
        P extends 'tags'
        ? Array < ProblemTagGetPayload<S['include'][P]>>  :
        P extends 'votes'
        ? Array < ProblemVoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ProblemCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Problem ?Problem [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'solutions'
        ? Array < SolutionGetPayload<S['select'][P]>>  :
        P extends 'tags'
        ? Array < ProblemTagGetPayload<S['select'][P]>>  :
        P extends 'votes'
        ? Array < ProblemVoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ProblemCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Problem
  : Problem


  type ProblemCountArgs = Merge<
    Omit<ProblemFindManyArgs, 'select' | 'include'> & {
      select?: ProblemCountAggregateInputType | true
    }
  >

  export interface ProblemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Problem that matches the filter.
     * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProblemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProblemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Problem'> extends True ? CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>> : CheckSelect<T, Prisma__ProblemClient<Problem | null >, Prisma__ProblemClient<ProblemGetPayload<T> | null >>

    /**
     * Find the first Problem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProblemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProblemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Problem'> extends True ? CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>> : CheckSelect<T, Prisma__ProblemClient<Problem | null >, Prisma__ProblemClient<ProblemGetPayload<T> | null >>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problem.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProblemFindManyArgs>(
      args?: SelectSubset<T, ProblemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Problem>>, PrismaPromise<Array<ProblemGetPayload<T>>>>

    /**
     * Create a Problem.
     * @param {ProblemCreateArgs} args - Arguments to create a Problem.
     * @example
     * // Create one Problem
     * const Problem = await prisma.problem.create({
     *   data: {
     *     // ... data to create a Problem
     *   }
     * })
     * 
    **/
    create<T extends ProblemCreateArgs>(
      args: SelectSubset<T, ProblemCreateArgs>
    ): CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>>

    /**
     * Create many Problems.
     *     @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
     *     @example
     *     // Create many Problems
     *     const problem = await prisma.problem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProblemCreateManyArgs>(
      args?: SelectSubset<T, ProblemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Problem.
     * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
     * @example
     * // Delete one Problem
     * const Problem = await prisma.problem.delete({
     *   where: {
     *     // ... filter to delete one Problem
     *   }
     * })
     * 
    **/
    delete<T extends ProblemDeleteArgs>(
      args: SelectSubset<T, ProblemDeleteArgs>
    ): CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>>

    /**
     * Update one Problem.
     * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
     * @example
     * // Update one Problem
     * const problem = await prisma.problem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProblemUpdateArgs>(
      args: SelectSubset<T, ProblemUpdateArgs>
    ): CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>>

    /**
     * Delete zero or more Problems.
     * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProblemDeleteManyArgs>(
      args?: SelectSubset<T, ProblemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProblemUpdateManyArgs>(
      args: SelectSubset<T, ProblemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Problem.
     * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
     * @example
     * // Update or create a Problem
     * const problem = await prisma.problem.upsert({
     *   create: {
     *     // ... data to create a Problem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem we want to update
     *   }
     * })
    **/
    upsert<T extends ProblemUpsertArgs>(
      args: SelectSubset<T, ProblemUpsertArgs>
    ): CheckSelect<T, Prisma__ProblemClient<Problem>, Prisma__ProblemClient<ProblemGetPayload<T>>>

    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problem.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemCountArgs>(
      args?: Subset<T, ProblemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemAggregateArgs>(args: Subset<T, ProblemAggregateArgs>): PrismaPromise<GetProblemAggregateType<T>>

    /**
     * Group by Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemGroupByArgs['orderBy'] }
        : { orderBy?: ProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProblemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    solutions<T extends SolutionFindManyArgs = {}>(args?: Subset<T, SolutionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Solution>>, PrismaPromise<Array<SolutionGetPayload<T>>>>;

    tags<T extends ProblemTagFindManyArgs = {}>(args?: Subset<T, ProblemTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProblemTag>>, PrismaPromise<Array<ProblemTagGetPayload<T>>>>;

    votes<T extends ProblemVoteFindManyArgs = {}>(args?: Subset<T, ProblemVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProblemVote>>, PrismaPromise<Array<ProblemVoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Problem findUnique
   */
  export type ProblemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * Throw an Error if a Problem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Problem to fetch.
     * 
    **/
    where: ProblemWhereUniqueInput
  }


  /**
   * Problem findFirst
   */
  export type ProblemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * Throw an Error if a Problem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Problem to fetch.
     * 
    **/
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     * 
    **/
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     * 
    **/
    distinct?: Enumerable<ProblemScalarFieldEnum>
  }


  /**
   * Problem findMany
   */
  export type ProblemFindManyArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * Filter, which Problems to fetch.
     * 
    **/
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     * 
    **/
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProblemScalarFieldEnum>
  }


  /**
   * Problem create
   */
  export type ProblemCreateArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * The data needed to create a Problem.
     * 
    **/
    data: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
  }


  /**
   * Problem createMany
   */
  export type ProblemCreateManyArgs = {
    data: Enumerable<ProblemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Problem update
   */
  export type ProblemUpdateArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * The data needed to update a Problem.
     * 
    **/
    data: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
    /**
     * Choose, which Problem to update.
     * 
    **/
    where: ProblemWhereUniqueInput
  }


  /**
   * Problem updateMany
   */
  export type ProblemUpdateManyArgs = {
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    where?: ProblemWhereInput
  }


  /**
   * Problem upsert
   */
  export type ProblemUpsertArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * The filter to search for the Problem to update in case it exists.
     * 
    **/
    where: ProblemWhereUniqueInput
    /**
     * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
     * 
    **/
    create: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
    /**
     * In case the Problem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
  }


  /**
   * Problem delete
   */
  export type ProblemDeleteArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
    /**
     * Filter which Problem to delete.
     * 
    **/
    where: ProblemWhereUniqueInput
  }


  /**
   * Problem deleteMany
   */
  export type ProblemDeleteManyArgs = {
    where?: ProblemWhereInput
  }


  /**
   * Problem without action
   */
  export type ProblemArgs = {
    /**
     * Select specific fields to fetch from the Problem
     * 
    **/
    select?: ProblemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemInclude | null
  }



  /**
   * Model Requirement
   */


  export type AggregateRequirement = {
    _count: RequirementCountAggregateOutputType | null
    _min: RequirementMinAggregateOutputType | null
    _max: RequirementMaxAggregateOutputType | null
  }

  export type RequirementMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
  }

  export type RequirementMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
  }

  export type RequirementCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    description: number
    _all: number
  }


  export type RequirementMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    description?: true
  }

  export type RequirementMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    description?: true
  }

  export type RequirementCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    _all?: true
  }

  export type RequirementAggregateArgs = {
    /**
     * Filter which Requirement to aggregate.
     * 
    **/
    where?: RequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requirements to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requirements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requirements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Requirements
    **/
    _count?: true | RequirementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequirementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequirementMaxAggregateInputType
  }

  export type GetRequirementAggregateType<T extends RequirementAggregateArgs> = {
        [P in keyof T & keyof AggregateRequirement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequirement[P]>
      : GetScalarType<T[P], AggregateRequirement[P]>
  }




  export type RequirementGroupByArgs = {
    where?: RequirementWhereInput
    orderBy?: Enumerable<RequirementOrderByWithAggregationInput>
    by: Array<RequirementScalarFieldEnum>
    having?: RequirementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequirementCountAggregateInputType | true
    _min?: RequirementMinAggregateInputType
    _max?: RequirementMaxAggregateInputType
  }


  export type RequirementGroupByOutputType = {
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
    description: string
    _count: RequirementCountAggregateOutputType | null
    _min: RequirementMinAggregateOutputType | null
    _max: RequirementMaxAggregateOutputType | null
  }

  type GetRequirementGroupByPayload<T extends RequirementGroupByArgs> = Promise<
    Array<
      PickArray<RequirementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequirementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequirementGroupByOutputType[P]>
            : GetScalarType<T[P], RequirementGroupByOutputType[P]>
        }
      >
    >


  export type RequirementSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    tags?: boolean | RequirementTagFindManyArgs
    votes?: boolean | RequirementVoteFindManyArgs
    _count?: boolean | RequirementCountOutputTypeArgs
  }

  export type RequirementInclude = {
    user?: boolean | UserArgs
    tags?: boolean | RequirementTagFindManyArgs
    votes?: boolean | RequirementVoteFindManyArgs
    _count?: boolean | RequirementCountOutputTypeArgs
  }

  export type RequirementGetPayload<
    S extends boolean | null | undefined | RequirementArgs,
    U = keyof S
      > = S extends true
        ? Requirement
    : S extends undefined
    ? never
    : S extends RequirementArgs | RequirementFindManyArgs
    ?'include' extends U
    ? Requirement  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'tags'
        ? Array < RequirementTagGetPayload<S['include'][P]>>  :
        P extends 'votes'
        ? Array < RequirementVoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? RequirementCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Requirement ?Requirement [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'tags'
        ? Array < RequirementTagGetPayload<S['select'][P]>>  :
        P extends 'votes'
        ? Array < RequirementVoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? RequirementCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Requirement
  : Requirement


  type RequirementCountArgs = Merge<
    Omit<RequirementFindManyArgs, 'select' | 'include'> & {
      select?: RequirementCountAggregateInputType | true
    }
  >

  export interface RequirementDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Requirement that matches the filter.
     * @param {RequirementFindUniqueArgs} args - Arguments to find a Requirement
     * @example
     * // Get one Requirement
     * const requirement = await prisma.requirement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RequirementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RequirementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Requirement'> extends True ? CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>> : CheckSelect<T, Prisma__RequirementClient<Requirement | null >, Prisma__RequirementClient<RequirementGetPayload<T> | null >>

    /**
     * Find the first Requirement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementFindFirstArgs} args - Arguments to find a Requirement
     * @example
     * // Get one Requirement
     * const requirement = await prisma.requirement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RequirementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RequirementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Requirement'> extends True ? CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>> : CheckSelect<T, Prisma__RequirementClient<Requirement | null >, Prisma__RequirementClient<RequirementGetPayload<T> | null >>

    /**
     * Find zero or more Requirements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Requirements
     * const requirements = await prisma.requirement.findMany()
     * 
     * // Get first 10 Requirements
     * const requirements = await prisma.requirement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requirementWithIdOnly = await prisma.requirement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RequirementFindManyArgs>(
      args?: SelectSubset<T, RequirementFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Requirement>>, PrismaPromise<Array<RequirementGetPayload<T>>>>

    /**
     * Create a Requirement.
     * @param {RequirementCreateArgs} args - Arguments to create a Requirement.
     * @example
     * // Create one Requirement
     * const Requirement = await prisma.requirement.create({
     *   data: {
     *     // ... data to create a Requirement
     *   }
     * })
     * 
    **/
    create<T extends RequirementCreateArgs>(
      args: SelectSubset<T, RequirementCreateArgs>
    ): CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>>

    /**
     * Create many Requirements.
     *     @param {RequirementCreateManyArgs} args - Arguments to create many Requirements.
     *     @example
     *     // Create many Requirements
     *     const requirement = await prisma.requirement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RequirementCreateManyArgs>(
      args?: SelectSubset<T, RequirementCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Requirement.
     * @param {RequirementDeleteArgs} args - Arguments to delete one Requirement.
     * @example
     * // Delete one Requirement
     * const Requirement = await prisma.requirement.delete({
     *   where: {
     *     // ... filter to delete one Requirement
     *   }
     * })
     * 
    **/
    delete<T extends RequirementDeleteArgs>(
      args: SelectSubset<T, RequirementDeleteArgs>
    ): CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>>

    /**
     * Update one Requirement.
     * @param {RequirementUpdateArgs} args - Arguments to update one Requirement.
     * @example
     * // Update one Requirement
     * const requirement = await prisma.requirement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RequirementUpdateArgs>(
      args: SelectSubset<T, RequirementUpdateArgs>
    ): CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>>

    /**
     * Delete zero or more Requirements.
     * @param {RequirementDeleteManyArgs} args - Arguments to filter Requirements to delete.
     * @example
     * // Delete a few Requirements
     * const { count } = await prisma.requirement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RequirementDeleteManyArgs>(
      args?: SelectSubset<T, RequirementDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Requirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Requirements
     * const requirement = await prisma.requirement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RequirementUpdateManyArgs>(
      args: SelectSubset<T, RequirementUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Requirement.
     * @param {RequirementUpsertArgs} args - Arguments to update or create a Requirement.
     * @example
     * // Update or create a Requirement
     * const requirement = await prisma.requirement.upsert({
     *   create: {
     *     // ... data to create a Requirement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Requirement we want to update
     *   }
     * })
    **/
    upsert<T extends RequirementUpsertArgs>(
      args: SelectSubset<T, RequirementUpsertArgs>
    ): CheckSelect<T, Prisma__RequirementClient<Requirement>, Prisma__RequirementClient<RequirementGetPayload<T>>>

    /**
     * Count the number of Requirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementCountArgs} args - Arguments to filter Requirements to count.
     * @example
     * // Count the number of Requirements
     * const count = await prisma.requirement.count({
     *   where: {
     *     // ... the filter for the Requirements we want to count
     *   }
     * })
    **/
    count<T extends RequirementCountArgs>(
      args?: Subset<T, RequirementCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequirementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Requirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequirementAggregateArgs>(args: Subset<T, RequirementAggregateArgs>): PrismaPromise<GetRequirementAggregateType<T>>

    /**
     * Group by Requirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequirementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequirementGroupByArgs['orderBy'] }
        : { orderBy?: RequirementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequirementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequirementGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Requirement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RequirementClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    tags<T extends RequirementTagFindManyArgs = {}>(args?: Subset<T, RequirementTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequirementTag>>, PrismaPromise<Array<RequirementTagGetPayload<T>>>>;

    votes<T extends RequirementVoteFindManyArgs = {}>(args?: Subset<T, RequirementVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequirementVote>>, PrismaPromise<Array<RequirementVoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Requirement findUnique
   */
  export type RequirementFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * Throw an Error if a Requirement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Requirement to fetch.
     * 
    **/
    where: RequirementWhereUniqueInput
  }


  /**
   * Requirement findFirst
   */
  export type RequirementFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * Throw an Error if a Requirement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Requirement to fetch.
     * 
    **/
    where?: RequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requirements to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Requirements.
     * 
    **/
    cursor?: RequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requirements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requirements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Requirements.
     * 
    **/
    distinct?: Enumerable<RequirementScalarFieldEnum>
  }


  /**
   * Requirement findMany
   */
  export type RequirementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * Filter, which Requirements to fetch.
     * 
    **/
    where?: RequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requirements to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Requirements.
     * 
    **/
    cursor?: RequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requirements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requirements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RequirementScalarFieldEnum>
  }


  /**
   * Requirement create
   */
  export type RequirementCreateArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * The data needed to create a Requirement.
     * 
    **/
    data: XOR<RequirementCreateInput, RequirementUncheckedCreateInput>
  }


  /**
   * Requirement createMany
   */
  export type RequirementCreateManyArgs = {
    data: Enumerable<RequirementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Requirement update
   */
  export type RequirementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * The data needed to update a Requirement.
     * 
    **/
    data: XOR<RequirementUpdateInput, RequirementUncheckedUpdateInput>
    /**
     * Choose, which Requirement to update.
     * 
    **/
    where: RequirementWhereUniqueInput
  }


  /**
   * Requirement updateMany
   */
  export type RequirementUpdateManyArgs = {
    data: XOR<RequirementUpdateManyMutationInput, RequirementUncheckedUpdateManyInput>
    where?: RequirementWhereInput
  }


  /**
   * Requirement upsert
   */
  export type RequirementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * The filter to search for the Requirement to update in case it exists.
     * 
    **/
    where: RequirementWhereUniqueInput
    /**
     * In case the Requirement found by the `where` argument doesn't exist, create a new Requirement with this data.
     * 
    **/
    create: XOR<RequirementCreateInput, RequirementUncheckedCreateInput>
    /**
     * In case the Requirement was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RequirementUpdateInput, RequirementUncheckedUpdateInput>
  }


  /**
   * Requirement delete
   */
  export type RequirementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
    /**
     * Filter which Requirement to delete.
     * 
    **/
    where: RequirementWhereUniqueInput
  }


  /**
   * Requirement deleteMany
   */
  export type RequirementDeleteManyArgs = {
    where?: RequirementWhereInput
  }


  /**
   * Requirement without action
   */
  export type RequirementArgs = {
    /**
     * Select specific fields to fetch from the Requirement
     * 
    **/
    select?: RequirementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: string
    name: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Promise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect = {
    id?: boolean
    name?: boolean
    requirements?: boolean | RequirementTagFindManyArgs
    problems?: boolean | ProblemTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagInclude = {
    requirements?: boolean | RequirementTagFindManyArgs
    problems?: boolean | ProblemTagFindManyArgs
    _count?: boolean | TagCountOutputTypeArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'requirements'
        ? Array < RequirementTagGetPayload<S['include'][P]>>  :
        P extends 'problems'
        ? Array < ProblemTagGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? TagCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Tag ?Tag [P]
  : 
          P extends 'requirements'
        ? Array < RequirementTagGetPayload<S['select'][P]>>  :
        P extends 'problems'
        ? Array < ProblemTagGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? TagCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    requirements<T extends RequirementTagFindManyArgs = {}>(args?: Subset<T, RequirementTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RequirementTag>>, PrismaPromise<Array<RequirementTagGetPayload<T>>>>;

    problems<T extends ProblemTagFindManyArgs = {}>(args?: Subset<T, ProblemTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProblemTag>>, PrismaPromise<Array<ProblemTagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
     * 
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
     * 
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
     * 
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     * 
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
  }



  /**
   * Model RequirementTag
   */


  export type AggregateRequirementTag = {
    _count: RequirementTagCountAggregateOutputType | null
    _min: RequirementTagMinAggregateOutputType | null
    _max: RequirementTagMaxAggregateOutputType | null
  }

  export type RequirementTagMinAggregateOutputType = {
    id: string | null
    requirementId: string | null
    tagId: string | null
  }

  export type RequirementTagMaxAggregateOutputType = {
    id: string | null
    requirementId: string | null
    tagId: string | null
  }

  export type RequirementTagCountAggregateOutputType = {
    id: number
    requirementId: number
    tagId: number
    _all: number
  }


  export type RequirementTagMinAggregateInputType = {
    id?: true
    requirementId?: true
    tagId?: true
  }

  export type RequirementTagMaxAggregateInputType = {
    id?: true
    requirementId?: true
    tagId?: true
  }

  export type RequirementTagCountAggregateInputType = {
    id?: true
    requirementId?: true
    tagId?: true
    _all?: true
  }

  export type RequirementTagAggregateArgs = {
    /**
     * Filter which RequirementTag to aggregate.
     * 
    **/
    where?: RequirementTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementTags to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RequirementTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequirementTags
    **/
    _count?: true | RequirementTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequirementTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequirementTagMaxAggregateInputType
  }

  export type GetRequirementTagAggregateType<T extends RequirementTagAggregateArgs> = {
        [P in keyof T & keyof AggregateRequirementTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequirementTag[P]>
      : GetScalarType<T[P], AggregateRequirementTag[P]>
  }




  export type RequirementTagGroupByArgs = {
    where?: RequirementTagWhereInput
    orderBy?: Enumerable<RequirementTagOrderByWithAggregationInput>
    by: Array<RequirementTagScalarFieldEnum>
    having?: RequirementTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequirementTagCountAggregateInputType | true
    _min?: RequirementTagMinAggregateInputType
    _max?: RequirementTagMaxAggregateInputType
  }


  export type RequirementTagGroupByOutputType = {
    id: string
    requirementId: string
    tagId: string
    _count: RequirementTagCountAggregateOutputType | null
    _min: RequirementTagMinAggregateOutputType | null
    _max: RequirementTagMaxAggregateOutputType | null
  }

  type GetRequirementTagGroupByPayload<T extends RequirementTagGroupByArgs> = Promise<
    Array<
      PickArray<RequirementTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequirementTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequirementTagGroupByOutputType[P]>
            : GetScalarType<T[P], RequirementTagGroupByOutputType[P]>
        }
      >
    >


  export type RequirementTagSelect = {
    id?: boolean
    requirement?: boolean | RequirementArgs
    requirementId?: boolean
    tag?: boolean | TagArgs
    tagId?: boolean
  }

  export type RequirementTagInclude = {
    requirement?: boolean | RequirementArgs
    tag?: boolean | TagArgs
  }

  export type RequirementTagGetPayload<
    S extends boolean | null | undefined | RequirementTagArgs,
    U = keyof S
      > = S extends true
        ? RequirementTag
    : S extends undefined
    ? never
    : S extends RequirementTagArgs | RequirementTagFindManyArgs
    ?'include' extends U
    ? RequirementTag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'requirement'
        ? RequirementGetPayload<S['include'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof RequirementTag ?RequirementTag [P]
  : 
          P extends 'requirement'
        ? RequirementGetPayload<S['select'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['select'][P]> : never
  } 
    : RequirementTag
  : RequirementTag


  type RequirementTagCountArgs = Merge<
    Omit<RequirementTagFindManyArgs, 'select' | 'include'> & {
      select?: RequirementTagCountAggregateInputType | true
    }
  >

  export interface RequirementTagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RequirementTag that matches the filter.
     * @param {RequirementTagFindUniqueArgs} args - Arguments to find a RequirementTag
     * @example
     * // Get one RequirementTag
     * const requirementTag = await prisma.requirementTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RequirementTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RequirementTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RequirementTag'> extends True ? CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>> : CheckSelect<T, Prisma__RequirementTagClient<RequirementTag | null >, Prisma__RequirementTagClient<RequirementTagGetPayload<T> | null >>

    /**
     * Find the first RequirementTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagFindFirstArgs} args - Arguments to find a RequirementTag
     * @example
     * // Get one RequirementTag
     * const requirementTag = await prisma.requirementTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RequirementTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RequirementTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RequirementTag'> extends True ? CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>> : CheckSelect<T, Prisma__RequirementTagClient<RequirementTag | null >, Prisma__RequirementTagClient<RequirementTagGetPayload<T> | null >>

    /**
     * Find zero or more RequirementTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequirementTags
     * const requirementTags = await prisma.requirementTag.findMany()
     * 
     * // Get first 10 RequirementTags
     * const requirementTags = await prisma.requirementTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requirementTagWithIdOnly = await prisma.requirementTag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RequirementTagFindManyArgs>(
      args?: SelectSubset<T, RequirementTagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RequirementTag>>, PrismaPromise<Array<RequirementTagGetPayload<T>>>>

    /**
     * Create a RequirementTag.
     * @param {RequirementTagCreateArgs} args - Arguments to create a RequirementTag.
     * @example
     * // Create one RequirementTag
     * const RequirementTag = await prisma.requirementTag.create({
     *   data: {
     *     // ... data to create a RequirementTag
     *   }
     * })
     * 
    **/
    create<T extends RequirementTagCreateArgs>(
      args: SelectSubset<T, RequirementTagCreateArgs>
    ): CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>>

    /**
     * Create many RequirementTags.
     *     @param {RequirementTagCreateManyArgs} args - Arguments to create many RequirementTags.
     *     @example
     *     // Create many RequirementTags
     *     const requirementTag = await prisma.requirementTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RequirementTagCreateManyArgs>(
      args?: SelectSubset<T, RequirementTagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RequirementTag.
     * @param {RequirementTagDeleteArgs} args - Arguments to delete one RequirementTag.
     * @example
     * // Delete one RequirementTag
     * const RequirementTag = await prisma.requirementTag.delete({
     *   where: {
     *     // ... filter to delete one RequirementTag
     *   }
     * })
     * 
    **/
    delete<T extends RequirementTagDeleteArgs>(
      args: SelectSubset<T, RequirementTagDeleteArgs>
    ): CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>>

    /**
     * Update one RequirementTag.
     * @param {RequirementTagUpdateArgs} args - Arguments to update one RequirementTag.
     * @example
     * // Update one RequirementTag
     * const requirementTag = await prisma.requirementTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RequirementTagUpdateArgs>(
      args: SelectSubset<T, RequirementTagUpdateArgs>
    ): CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>>

    /**
     * Delete zero or more RequirementTags.
     * @param {RequirementTagDeleteManyArgs} args - Arguments to filter RequirementTags to delete.
     * @example
     * // Delete a few RequirementTags
     * const { count } = await prisma.requirementTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RequirementTagDeleteManyArgs>(
      args?: SelectSubset<T, RequirementTagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequirementTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequirementTags
     * const requirementTag = await prisma.requirementTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RequirementTagUpdateManyArgs>(
      args: SelectSubset<T, RequirementTagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RequirementTag.
     * @param {RequirementTagUpsertArgs} args - Arguments to update or create a RequirementTag.
     * @example
     * // Update or create a RequirementTag
     * const requirementTag = await prisma.requirementTag.upsert({
     *   create: {
     *     // ... data to create a RequirementTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequirementTag we want to update
     *   }
     * })
    **/
    upsert<T extends RequirementTagUpsertArgs>(
      args: SelectSubset<T, RequirementTagUpsertArgs>
    ): CheckSelect<T, Prisma__RequirementTagClient<RequirementTag>, Prisma__RequirementTagClient<RequirementTagGetPayload<T>>>

    /**
     * Count the number of RequirementTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagCountArgs} args - Arguments to filter RequirementTags to count.
     * @example
     * // Count the number of RequirementTags
     * const count = await prisma.requirementTag.count({
     *   where: {
     *     // ... the filter for the RequirementTags we want to count
     *   }
     * })
    **/
    count<T extends RequirementTagCountArgs>(
      args?: Subset<T, RequirementTagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequirementTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequirementTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequirementTagAggregateArgs>(args: Subset<T, RequirementTagAggregateArgs>): PrismaPromise<GetRequirementTagAggregateType<T>>

    /**
     * Group by RequirementTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequirementTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequirementTagGroupByArgs['orderBy'] }
        : { orderBy?: RequirementTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequirementTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequirementTagGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequirementTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RequirementTagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    requirement<T extends RequirementArgs = {}>(args?: Subset<T, RequirementArgs>): CheckSelect<T, Prisma__RequirementClient<Requirement | null >, Prisma__RequirementClient<RequirementGetPayload<T> | null >>;

    tag<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * RequirementTag findUnique
   */
  export type RequirementTagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * Throw an Error if a RequirementTag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequirementTag to fetch.
     * 
    **/
    where: RequirementTagWhereUniqueInput
  }


  /**
   * RequirementTag findFirst
   */
  export type RequirementTagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * Throw an Error if a RequirementTag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequirementTag to fetch.
     * 
    **/
    where?: RequirementTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementTags to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequirementTags.
     * 
    **/
    cursor?: RequirementTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequirementTags.
     * 
    **/
    distinct?: Enumerable<RequirementTagScalarFieldEnum>
  }


  /**
   * RequirementTag findMany
   */
  export type RequirementTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * Filter, which RequirementTags to fetch.
     * 
    **/
    where?: RequirementTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementTags to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequirementTags.
     * 
    **/
    cursor?: RequirementTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementTags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RequirementTagScalarFieldEnum>
  }


  /**
   * RequirementTag create
   */
  export type RequirementTagCreateArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * The data needed to create a RequirementTag.
     * 
    **/
    data: XOR<RequirementTagCreateInput, RequirementTagUncheckedCreateInput>
  }


  /**
   * RequirementTag createMany
   */
  export type RequirementTagCreateManyArgs = {
    data: Enumerable<RequirementTagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RequirementTag update
   */
  export type RequirementTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * The data needed to update a RequirementTag.
     * 
    **/
    data: XOR<RequirementTagUpdateInput, RequirementTagUncheckedUpdateInput>
    /**
     * Choose, which RequirementTag to update.
     * 
    **/
    where: RequirementTagWhereUniqueInput
  }


  /**
   * RequirementTag updateMany
   */
  export type RequirementTagUpdateManyArgs = {
    data: XOR<RequirementTagUpdateManyMutationInput, RequirementTagUncheckedUpdateManyInput>
    where?: RequirementTagWhereInput
  }


  /**
   * RequirementTag upsert
   */
  export type RequirementTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * The filter to search for the RequirementTag to update in case it exists.
     * 
    **/
    where: RequirementTagWhereUniqueInput
    /**
     * In case the RequirementTag found by the `where` argument doesn't exist, create a new RequirementTag with this data.
     * 
    **/
    create: XOR<RequirementTagCreateInput, RequirementTagUncheckedCreateInput>
    /**
     * In case the RequirementTag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RequirementTagUpdateInput, RequirementTagUncheckedUpdateInput>
  }


  /**
   * RequirementTag delete
   */
  export type RequirementTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
    /**
     * Filter which RequirementTag to delete.
     * 
    **/
    where: RequirementTagWhereUniqueInput
  }


  /**
   * RequirementTag deleteMany
   */
  export type RequirementTagDeleteManyArgs = {
    where?: RequirementTagWhereInput
  }


  /**
   * RequirementTag without action
   */
  export type RequirementTagArgs = {
    /**
     * Select specific fields to fetch from the RequirementTag
     * 
    **/
    select?: RequirementTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementTagInclude | null
  }



  /**
   * Model ProblemTag
   */


  export type AggregateProblemTag = {
    _count: ProblemTagCountAggregateOutputType | null
    _min: ProblemTagMinAggregateOutputType | null
    _max: ProblemTagMaxAggregateOutputType | null
  }

  export type ProblemTagMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    tagId: string | null
  }

  export type ProblemTagMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    tagId: string | null
  }

  export type ProblemTagCountAggregateOutputType = {
    id: number
    problemId: number
    tagId: number
    _all: number
  }


  export type ProblemTagMinAggregateInputType = {
    id?: true
    problemId?: true
    tagId?: true
  }

  export type ProblemTagMaxAggregateInputType = {
    id?: true
    problemId?: true
    tagId?: true
  }

  export type ProblemTagCountAggregateInputType = {
    id?: true
    problemId?: true
    tagId?: true
    _all?: true
  }

  export type ProblemTagAggregateArgs = {
    /**
     * Filter which ProblemTag to aggregate.
     * 
    **/
    where?: ProblemTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProblemTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemTags
    **/
    _count?: true | ProblemTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemTagMaxAggregateInputType
  }

  export type GetProblemTagAggregateType<T extends ProblemTagAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemTag[P]>
      : GetScalarType<T[P], AggregateProblemTag[P]>
  }




  export type ProblemTagGroupByArgs = {
    where?: ProblemTagWhereInput
    orderBy?: Enumerable<ProblemTagOrderByWithAggregationInput>
    by: Array<ProblemTagScalarFieldEnum>
    having?: ProblemTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemTagCountAggregateInputType | true
    _min?: ProblemTagMinAggregateInputType
    _max?: ProblemTagMaxAggregateInputType
  }


  export type ProblemTagGroupByOutputType = {
    id: string
    problemId: string
    tagId: string
    _count: ProblemTagCountAggregateOutputType | null
    _min: ProblemTagMinAggregateOutputType | null
    _max: ProblemTagMaxAggregateOutputType | null
  }

  type GetProblemTagGroupByPayload<T extends ProblemTagGroupByArgs> = Promise<
    Array<
      PickArray<ProblemTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemTagGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemTagGroupByOutputType[P]>
        }
      >
    >


  export type ProblemTagSelect = {
    id?: boolean
    problem?: boolean | ProblemArgs
    problemId?: boolean
    tag?: boolean | TagArgs
    tagId?: boolean
  }

  export type ProblemTagInclude = {
    problem?: boolean | ProblemArgs
    tag?: boolean | TagArgs
  }

  export type ProblemTagGetPayload<
    S extends boolean | null | undefined | ProblemTagArgs,
    U = keyof S
      > = S extends true
        ? ProblemTag
    : S extends undefined
    ? never
    : S extends ProblemTagArgs | ProblemTagFindManyArgs
    ?'include' extends U
    ? ProblemTag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'problem'
        ? ProblemGetPayload<S['include'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProblemTag ?ProblemTag [P]
  : 
          P extends 'problem'
        ? ProblemGetPayload<S['select'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['select'][P]> : never
  } 
    : ProblemTag
  : ProblemTag


  type ProblemTagCountArgs = Merge<
    Omit<ProblemTagFindManyArgs, 'select' | 'include'> & {
      select?: ProblemTagCountAggregateInputType | true
    }
  >

  export interface ProblemTagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProblemTag that matches the filter.
     * @param {ProblemTagFindUniqueArgs} args - Arguments to find a ProblemTag
     * @example
     * // Get one ProblemTag
     * const problemTag = await prisma.problemTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProblemTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProblemTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProblemTag'> extends True ? CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>> : CheckSelect<T, Prisma__ProblemTagClient<ProblemTag | null >, Prisma__ProblemTagClient<ProblemTagGetPayload<T> | null >>

    /**
     * Find the first ProblemTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagFindFirstArgs} args - Arguments to find a ProblemTag
     * @example
     * // Get one ProblemTag
     * const problemTag = await prisma.problemTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProblemTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProblemTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProblemTag'> extends True ? CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>> : CheckSelect<T, Prisma__ProblemTagClient<ProblemTag | null >, Prisma__ProblemTagClient<ProblemTagGetPayload<T> | null >>

    /**
     * Find zero or more ProblemTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemTags
     * const problemTags = await prisma.problemTag.findMany()
     * 
     * // Get first 10 ProblemTags
     * const problemTags = await prisma.problemTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemTagWithIdOnly = await prisma.problemTag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProblemTagFindManyArgs>(
      args?: SelectSubset<T, ProblemTagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ProblemTag>>, PrismaPromise<Array<ProblemTagGetPayload<T>>>>

    /**
     * Create a ProblemTag.
     * @param {ProblemTagCreateArgs} args - Arguments to create a ProblemTag.
     * @example
     * // Create one ProblemTag
     * const ProblemTag = await prisma.problemTag.create({
     *   data: {
     *     // ... data to create a ProblemTag
     *   }
     * })
     * 
    **/
    create<T extends ProblemTagCreateArgs>(
      args: SelectSubset<T, ProblemTagCreateArgs>
    ): CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>>

    /**
     * Create many ProblemTags.
     *     @param {ProblemTagCreateManyArgs} args - Arguments to create many ProblemTags.
     *     @example
     *     // Create many ProblemTags
     *     const problemTag = await prisma.problemTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProblemTagCreateManyArgs>(
      args?: SelectSubset<T, ProblemTagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProblemTag.
     * @param {ProblemTagDeleteArgs} args - Arguments to delete one ProblemTag.
     * @example
     * // Delete one ProblemTag
     * const ProblemTag = await prisma.problemTag.delete({
     *   where: {
     *     // ... filter to delete one ProblemTag
     *   }
     * })
     * 
    **/
    delete<T extends ProblemTagDeleteArgs>(
      args: SelectSubset<T, ProblemTagDeleteArgs>
    ): CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>>

    /**
     * Update one ProblemTag.
     * @param {ProblemTagUpdateArgs} args - Arguments to update one ProblemTag.
     * @example
     * // Update one ProblemTag
     * const problemTag = await prisma.problemTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProblemTagUpdateArgs>(
      args: SelectSubset<T, ProblemTagUpdateArgs>
    ): CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>>

    /**
     * Delete zero or more ProblemTags.
     * @param {ProblemTagDeleteManyArgs} args - Arguments to filter ProblemTags to delete.
     * @example
     * // Delete a few ProblemTags
     * const { count } = await prisma.problemTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProblemTagDeleteManyArgs>(
      args?: SelectSubset<T, ProblemTagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemTags
     * const problemTag = await prisma.problemTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProblemTagUpdateManyArgs>(
      args: SelectSubset<T, ProblemTagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProblemTag.
     * @param {ProblemTagUpsertArgs} args - Arguments to update or create a ProblemTag.
     * @example
     * // Update or create a ProblemTag
     * const problemTag = await prisma.problemTag.upsert({
     *   create: {
     *     // ... data to create a ProblemTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemTag we want to update
     *   }
     * })
    **/
    upsert<T extends ProblemTagUpsertArgs>(
      args: SelectSubset<T, ProblemTagUpsertArgs>
    ): CheckSelect<T, Prisma__ProblemTagClient<ProblemTag>, Prisma__ProblemTagClient<ProblemTagGetPayload<T>>>

    /**
     * Count the number of ProblemTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagCountArgs} args - Arguments to filter ProblemTags to count.
     * @example
     * // Count the number of ProblemTags
     * const count = await prisma.problemTag.count({
     *   where: {
     *     // ... the filter for the ProblemTags we want to count
     *   }
     * })
    **/
    count<T extends ProblemTagCountArgs>(
      args?: Subset<T, ProblemTagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemTagAggregateArgs>(args: Subset<T, ProblemTagAggregateArgs>): PrismaPromise<GetProblemTagAggregateType<T>>

    /**
     * Group by ProblemTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemTagGroupByArgs['orderBy'] }
        : { orderBy?: ProblemTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemTagGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProblemTagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    problem<T extends ProblemArgs = {}>(args?: Subset<T, ProblemArgs>): CheckSelect<T, Prisma__ProblemClient<Problem | null >, Prisma__ProblemClient<ProblemGetPayload<T> | null >>;

    tag<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProblemTag findUnique
   */
  export type ProblemTagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * Throw an Error if a ProblemTag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProblemTag to fetch.
     * 
    **/
    where: ProblemTagWhereUniqueInput
  }


  /**
   * ProblemTag findFirst
   */
  export type ProblemTagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * Throw an Error if a ProblemTag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProblemTag to fetch.
     * 
    **/
    where?: ProblemTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemTags.
     * 
    **/
    cursor?: ProblemTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemTags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemTags.
     * 
    **/
    distinct?: Enumerable<ProblemTagScalarFieldEnum>
  }


  /**
   * ProblemTag findMany
   */
  export type ProblemTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * Filter, which ProblemTags to fetch.
     * 
    **/
    where?: ProblemTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemTags to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemTags.
     * 
    **/
    cursor?: ProblemTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemTags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemTags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProblemTagScalarFieldEnum>
  }


  /**
   * ProblemTag create
   */
  export type ProblemTagCreateArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * The data needed to create a ProblemTag.
     * 
    **/
    data: XOR<ProblemTagCreateInput, ProblemTagUncheckedCreateInput>
  }


  /**
   * ProblemTag createMany
   */
  export type ProblemTagCreateManyArgs = {
    data: Enumerable<ProblemTagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProblemTag update
   */
  export type ProblemTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * The data needed to update a ProblemTag.
     * 
    **/
    data: XOR<ProblemTagUpdateInput, ProblemTagUncheckedUpdateInput>
    /**
     * Choose, which ProblemTag to update.
     * 
    **/
    where: ProblemTagWhereUniqueInput
  }


  /**
   * ProblemTag updateMany
   */
  export type ProblemTagUpdateManyArgs = {
    data: XOR<ProblemTagUpdateManyMutationInput, ProblemTagUncheckedUpdateManyInput>
    where?: ProblemTagWhereInput
  }


  /**
   * ProblemTag upsert
   */
  export type ProblemTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * The filter to search for the ProblemTag to update in case it exists.
     * 
    **/
    where: ProblemTagWhereUniqueInput
    /**
     * In case the ProblemTag found by the `where` argument doesn't exist, create a new ProblemTag with this data.
     * 
    **/
    create: XOR<ProblemTagCreateInput, ProblemTagUncheckedCreateInput>
    /**
     * In case the ProblemTag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProblemTagUpdateInput, ProblemTagUncheckedUpdateInput>
  }


  /**
   * ProblemTag delete
   */
  export type ProblemTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
    /**
     * Filter which ProblemTag to delete.
     * 
    **/
    where: ProblemTagWhereUniqueInput
  }


  /**
   * ProblemTag deleteMany
   */
  export type ProblemTagDeleteManyArgs = {
    where?: ProblemTagWhereInput
  }


  /**
   * ProblemTag without action
   */
  export type ProblemTagArgs = {
    /**
     * Select specific fields to fetch from the ProblemTag
     * 
    **/
    select?: ProblemTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemTagInclude | null
  }



  /**
   * Model Solution
   */


  export type AggregateSolution = {
    _count: SolutionCountAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  export type SolutionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    markedBest: boolean | null
    language: Language | null
    content: string | null
    publish: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolutionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    markedBest: boolean | null
    language: Language | null
    content: string | null
    publish: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolutionCountAggregateOutputType = {
    id: number
    userId: number
    problemId: number
    markedBest: number
    language: number
    content: number
    publish: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SolutionMinAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    markedBest?: true
    language?: true
    content?: true
    publish?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolutionMaxAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    markedBest?: true
    language?: true
    content?: true
    publish?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolutionCountAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    markedBest?: true
    language?: true
    content?: true
    publish?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SolutionAggregateArgs = {
    /**
     * Filter which Solution to aggregate.
     * 
    **/
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Solutions
    **/
    _count?: true | SolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolutionMaxAggregateInputType
  }

  export type GetSolutionAggregateType<T extends SolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolution[P]>
      : GetScalarType<T[P], AggregateSolution[P]>
  }




  export type SolutionGroupByArgs = {
    where?: SolutionWhereInput
    orderBy?: Enumerable<SolutionOrderByWithAggregationInput>
    by: Array<SolutionScalarFieldEnum>
    having?: SolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolutionCountAggregateInputType | true
    _min?: SolutionMinAggregateInputType
    _max?: SolutionMaxAggregateInputType
  }


  export type SolutionGroupByOutputType = {
    id: string
    userId: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish: boolean
    createdAt: Date
    updatedAt: Date
    _count: SolutionCountAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  type GetSolutionGroupByPayload<T extends SolutionGroupByArgs> = Promise<
    Array<
      PickArray<SolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolutionGroupByOutputType[P]>
            : GetScalarType<T[P], SolutionGroupByOutputType[P]>
        }
      >
    >


  export type SolutionSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    problem?: boolean | ProblemArgs
    problemId?: boolean
    markedBest?: boolean
    language?: boolean
    content?: boolean
    publish?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean | SolutionVoteFindManyArgs
    _count?: boolean | SolutionCountOutputTypeArgs
  }

  export type SolutionInclude = {
    user?: boolean | UserArgs
    problem?: boolean | ProblemArgs
    votes?: boolean | SolutionVoteFindManyArgs
    _count?: boolean | SolutionCountOutputTypeArgs
  }

  export type SolutionGetPayload<
    S extends boolean | null | undefined | SolutionArgs,
    U = keyof S
      > = S extends true
        ? Solution
    : S extends undefined
    ? never
    : S extends SolutionArgs | SolutionFindManyArgs
    ?'include' extends U
    ? Solution  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'problem'
        ? ProblemGetPayload<S['include'][P]> :
        P extends 'votes'
        ? Array < SolutionVoteGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? SolutionCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Solution ?Solution [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'problem'
        ? ProblemGetPayload<S['select'][P]> :
        P extends 'votes'
        ? Array < SolutionVoteGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? SolutionCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Solution
  : Solution


  type SolutionCountArgs = Merge<
    Omit<SolutionFindManyArgs, 'select' | 'include'> & {
      select?: SolutionCountAggregateInputType | true
    }
  >

  export interface SolutionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Solution that matches the filter.
     * @param {SolutionFindUniqueArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SolutionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SolutionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Solution'> extends True ? CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>> : CheckSelect<T, Prisma__SolutionClient<Solution | null >, Prisma__SolutionClient<SolutionGetPayload<T> | null >>

    /**
     * Find the first Solution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindFirstArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SolutionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SolutionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Solution'> extends True ? CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>> : CheckSelect<T, Prisma__SolutionClient<Solution | null >, Prisma__SolutionClient<SolutionGetPayload<T> | null >>

    /**
     * Find zero or more Solutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Solutions
     * const solutions = await prisma.solution.findMany()
     * 
     * // Get first 10 Solutions
     * const solutions = await prisma.solution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solutionWithIdOnly = await prisma.solution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SolutionFindManyArgs>(
      args?: SelectSubset<T, SolutionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Solution>>, PrismaPromise<Array<SolutionGetPayload<T>>>>

    /**
     * Create a Solution.
     * @param {SolutionCreateArgs} args - Arguments to create a Solution.
     * @example
     * // Create one Solution
     * const Solution = await prisma.solution.create({
     *   data: {
     *     // ... data to create a Solution
     *   }
     * })
     * 
    **/
    create<T extends SolutionCreateArgs>(
      args: SelectSubset<T, SolutionCreateArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Create many Solutions.
     *     @param {SolutionCreateManyArgs} args - Arguments to create many Solutions.
     *     @example
     *     // Create many Solutions
     *     const solution = await prisma.solution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SolutionCreateManyArgs>(
      args?: SelectSubset<T, SolutionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Solution.
     * @param {SolutionDeleteArgs} args - Arguments to delete one Solution.
     * @example
     * // Delete one Solution
     * const Solution = await prisma.solution.delete({
     *   where: {
     *     // ... filter to delete one Solution
     *   }
     * })
     * 
    **/
    delete<T extends SolutionDeleteArgs>(
      args: SelectSubset<T, SolutionDeleteArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Update one Solution.
     * @param {SolutionUpdateArgs} args - Arguments to update one Solution.
     * @example
     * // Update one Solution
     * const solution = await prisma.solution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SolutionUpdateArgs>(
      args: SelectSubset<T, SolutionUpdateArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Delete zero or more Solutions.
     * @param {SolutionDeleteManyArgs} args - Arguments to filter Solutions to delete.
     * @example
     * // Delete a few Solutions
     * const { count } = await prisma.solution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SolutionDeleteManyArgs>(
      args?: SelectSubset<T, SolutionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Solutions
     * const solution = await prisma.solution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SolutionUpdateManyArgs>(
      args: SelectSubset<T, SolutionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Solution.
     * @param {SolutionUpsertArgs} args - Arguments to update or create a Solution.
     * @example
     * // Update or create a Solution
     * const solution = await prisma.solution.upsert({
     *   create: {
     *     // ... data to create a Solution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Solution we want to update
     *   }
     * })
    **/
    upsert<T extends SolutionUpsertArgs>(
      args: SelectSubset<T, SolutionUpsertArgs>
    ): CheckSelect<T, Prisma__SolutionClient<Solution>, Prisma__SolutionClient<SolutionGetPayload<T>>>

    /**
     * Count the number of Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionCountArgs} args - Arguments to filter Solutions to count.
     * @example
     * // Count the number of Solutions
     * const count = await prisma.solution.count({
     *   where: {
     *     // ... the filter for the Solutions we want to count
     *   }
     * })
    **/
    count<T extends SolutionCountArgs>(
      args?: Subset<T, SolutionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolutionAggregateArgs>(args: Subset<T, SolutionAggregateArgs>): PrismaPromise<GetSolutionAggregateType<T>>

    /**
     * Group by Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolutionGroupByArgs['orderBy'] }
        : { orderBy?: SolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolutionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Solution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SolutionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    problem<T extends ProblemArgs = {}>(args?: Subset<T, ProblemArgs>): CheckSelect<T, Prisma__ProblemClient<Problem | null >, Prisma__ProblemClient<ProblemGetPayload<T> | null >>;

    votes<T extends SolutionVoteFindManyArgs = {}>(args?: Subset<T, SolutionVoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SolutionVote>>, PrismaPromise<Array<SolutionVoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Solution findUnique
   */
  export type SolutionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * Throw an Error if a Solution can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Solution to fetch.
     * 
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution findFirst
   */
  export type SolutionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * Throw an Error if a Solution can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Solution to fetch.
     * 
    **/
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
     * 
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solutions.
     * 
    **/
    distinct?: Enumerable<SolutionScalarFieldEnum>
  }


  /**
   * Solution findMany
   */
  export type SolutionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * Filter, which Solutions to fetch.
     * 
    **/
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Solutions.
     * 
    **/
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SolutionScalarFieldEnum>
  }


  /**
   * Solution create
   */
  export type SolutionCreateArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * The data needed to create a Solution.
     * 
    **/
    data: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
  }


  /**
   * Solution createMany
   */
  export type SolutionCreateManyArgs = {
    data: Enumerable<SolutionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Solution update
   */
  export type SolutionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * The data needed to update a Solution.
     * 
    **/
    data: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
    /**
     * Choose, which Solution to update.
     * 
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution updateMany
   */
  export type SolutionUpdateManyArgs = {
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyInput>
    where?: SolutionWhereInput
  }


  /**
   * Solution upsert
   */
  export type SolutionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * The filter to search for the Solution to update in case it exists.
     * 
    **/
    where: SolutionWhereUniqueInput
    /**
     * In case the Solution found by the `where` argument doesn't exist, create a new Solution with this data.
     * 
    **/
    create: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
    /**
     * In case the Solution was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
  }


  /**
   * Solution delete
   */
  export type SolutionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
    /**
     * Filter which Solution to delete.
     * 
    **/
    where: SolutionWhereUniqueInput
  }


  /**
   * Solution deleteMany
   */
  export type SolutionDeleteManyArgs = {
    where?: SolutionWhereInput
  }


  /**
   * Solution without action
   */
  export type SolutionArgs = {
    /**
     * Select specific fields to fetch from the Solution
     * 
    **/
    select?: SolutionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionInclude | null
  }



  /**
   * Model SolutionVote
   */


  export type AggregateSolutionVote = {
    _count: SolutionVoteCountAggregateOutputType | null
    _min: SolutionVoteMinAggregateOutputType | null
    _max: SolutionVoteMaxAggregateOutputType | null
  }

  export type SolutionVoteMinAggregateOutputType = {
    id: string | null
    solutionId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolutionVoteMaxAggregateOutputType = {
    id: string | null
    solutionId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolutionVoteCountAggregateOutputType = {
    id: number
    solutionId: number
    userId: number
    value: number
    comment: number
    identifiers: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SolutionVoteMinAggregateInputType = {
    id?: true
    solutionId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolutionVoteMaxAggregateInputType = {
    id?: true
    solutionId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolutionVoteCountAggregateInputType = {
    id?: true
    solutionId?: true
    userId?: true
    value?: true
    comment?: true
    identifiers?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SolutionVoteAggregateArgs = {
    /**
     * Filter which SolutionVote to aggregate.
     * 
    **/
    where?: SolutionVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolutionVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SolutionVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolutionVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolutionVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SolutionVotes
    **/
    _count?: true | SolutionVoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolutionVoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolutionVoteMaxAggregateInputType
  }

  export type GetSolutionVoteAggregateType<T extends SolutionVoteAggregateArgs> = {
        [P in keyof T & keyof AggregateSolutionVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolutionVote[P]>
      : GetScalarType<T[P], AggregateSolutionVote[P]>
  }




  export type SolutionVoteGroupByArgs = {
    where?: SolutionVoteWhereInput
    orderBy?: Enumerable<SolutionVoteOrderByWithAggregationInput>
    by: Array<SolutionVoteScalarFieldEnum>
    having?: SolutionVoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolutionVoteCountAggregateInputType | true
    _min?: SolutionVoteMinAggregateInputType
    _max?: SolutionVoteMaxAggregateInputType
  }


  export type SolutionVoteGroupByOutputType = {
    id: string
    solutionId: string
    userId: string
    value: VoteValue
    comment: string | null
    identifiers: SolutionIdentifier[]
    createdAt: Date
    updatedAt: Date
    _count: SolutionVoteCountAggregateOutputType | null
    _min: SolutionVoteMinAggregateOutputType | null
    _max: SolutionVoteMaxAggregateOutputType | null
  }

  type GetSolutionVoteGroupByPayload<T extends SolutionVoteGroupByArgs> = Promise<
    Array<
      PickArray<SolutionVoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolutionVoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolutionVoteGroupByOutputType[P]>
            : GetScalarType<T[P], SolutionVoteGroupByOutputType[P]>
        }
      >
    >


  export type SolutionVoteSelect = {
    id?: boolean
    solution?: boolean | SolutionArgs
    solutionId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    value?: boolean
    comment?: boolean
    identifiers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SolutionVoteInclude = {
    solution?: boolean | SolutionArgs
    user?: boolean | UserArgs
  }

  export type SolutionVoteGetPayload<
    S extends boolean | null | undefined | SolutionVoteArgs,
    U = keyof S
      > = S extends true
        ? SolutionVote
    : S extends undefined
    ? never
    : S extends SolutionVoteArgs | SolutionVoteFindManyArgs
    ?'include' extends U
    ? SolutionVote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'solution'
        ? SolutionGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SolutionVote ?SolutionVote [P]
  : 
          P extends 'solution'
        ? SolutionGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : SolutionVote
  : SolutionVote


  type SolutionVoteCountArgs = Merge<
    Omit<SolutionVoteFindManyArgs, 'select' | 'include'> & {
      select?: SolutionVoteCountAggregateInputType | true
    }
  >

  export interface SolutionVoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SolutionVote that matches the filter.
     * @param {SolutionVoteFindUniqueArgs} args - Arguments to find a SolutionVote
     * @example
     * // Get one SolutionVote
     * const solutionVote = await prisma.solutionVote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SolutionVoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SolutionVoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SolutionVote'> extends True ? CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>> : CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote | null >, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T> | null >>

    /**
     * Find the first SolutionVote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteFindFirstArgs} args - Arguments to find a SolutionVote
     * @example
     * // Get one SolutionVote
     * const solutionVote = await prisma.solutionVote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SolutionVoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SolutionVoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SolutionVote'> extends True ? CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>> : CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote | null >, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T> | null >>

    /**
     * Find zero or more SolutionVotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SolutionVotes
     * const solutionVotes = await prisma.solutionVote.findMany()
     * 
     * // Get first 10 SolutionVotes
     * const solutionVotes = await prisma.solutionVote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solutionVoteWithIdOnly = await prisma.solutionVote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SolutionVoteFindManyArgs>(
      args?: SelectSubset<T, SolutionVoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SolutionVote>>, PrismaPromise<Array<SolutionVoteGetPayload<T>>>>

    /**
     * Create a SolutionVote.
     * @param {SolutionVoteCreateArgs} args - Arguments to create a SolutionVote.
     * @example
     * // Create one SolutionVote
     * const SolutionVote = await prisma.solutionVote.create({
     *   data: {
     *     // ... data to create a SolutionVote
     *   }
     * })
     * 
    **/
    create<T extends SolutionVoteCreateArgs>(
      args: SelectSubset<T, SolutionVoteCreateArgs>
    ): CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>>

    /**
     * Create many SolutionVotes.
     *     @param {SolutionVoteCreateManyArgs} args - Arguments to create many SolutionVotes.
     *     @example
     *     // Create many SolutionVotes
     *     const solutionVote = await prisma.solutionVote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SolutionVoteCreateManyArgs>(
      args?: SelectSubset<T, SolutionVoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SolutionVote.
     * @param {SolutionVoteDeleteArgs} args - Arguments to delete one SolutionVote.
     * @example
     * // Delete one SolutionVote
     * const SolutionVote = await prisma.solutionVote.delete({
     *   where: {
     *     // ... filter to delete one SolutionVote
     *   }
     * })
     * 
    **/
    delete<T extends SolutionVoteDeleteArgs>(
      args: SelectSubset<T, SolutionVoteDeleteArgs>
    ): CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>>

    /**
     * Update one SolutionVote.
     * @param {SolutionVoteUpdateArgs} args - Arguments to update one SolutionVote.
     * @example
     * // Update one SolutionVote
     * const solutionVote = await prisma.solutionVote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SolutionVoteUpdateArgs>(
      args: SelectSubset<T, SolutionVoteUpdateArgs>
    ): CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>>

    /**
     * Delete zero or more SolutionVotes.
     * @param {SolutionVoteDeleteManyArgs} args - Arguments to filter SolutionVotes to delete.
     * @example
     * // Delete a few SolutionVotes
     * const { count } = await prisma.solutionVote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SolutionVoteDeleteManyArgs>(
      args?: SelectSubset<T, SolutionVoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SolutionVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SolutionVotes
     * const solutionVote = await prisma.solutionVote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SolutionVoteUpdateManyArgs>(
      args: SelectSubset<T, SolutionVoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SolutionVote.
     * @param {SolutionVoteUpsertArgs} args - Arguments to update or create a SolutionVote.
     * @example
     * // Update or create a SolutionVote
     * const solutionVote = await prisma.solutionVote.upsert({
     *   create: {
     *     // ... data to create a SolutionVote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SolutionVote we want to update
     *   }
     * })
    **/
    upsert<T extends SolutionVoteUpsertArgs>(
      args: SelectSubset<T, SolutionVoteUpsertArgs>
    ): CheckSelect<T, Prisma__SolutionVoteClient<SolutionVote>, Prisma__SolutionVoteClient<SolutionVoteGetPayload<T>>>

    /**
     * Count the number of SolutionVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteCountArgs} args - Arguments to filter SolutionVotes to count.
     * @example
     * // Count the number of SolutionVotes
     * const count = await prisma.solutionVote.count({
     *   where: {
     *     // ... the filter for the SolutionVotes we want to count
     *   }
     * })
    **/
    count<T extends SolutionVoteCountArgs>(
      args?: Subset<T, SolutionVoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolutionVoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SolutionVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolutionVoteAggregateArgs>(args: Subset<T, SolutionVoteAggregateArgs>): PrismaPromise<GetSolutionVoteAggregateType<T>>

    /**
     * Group by SolutionVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionVoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolutionVoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolutionVoteGroupByArgs['orderBy'] }
        : { orderBy?: SolutionVoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolutionVoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolutionVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SolutionVote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SolutionVoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    solution<T extends SolutionArgs = {}>(args?: Subset<T, SolutionArgs>): CheckSelect<T, Prisma__SolutionClient<Solution | null >, Prisma__SolutionClient<SolutionGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SolutionVote findUnique
   */
  export type SolutionVoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * Throw an Error if a SolutionVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SolutionVote to fetch.
     * 
    **/
    where: SolutionVoteWhereUniqueInput
  }


  /**
   * SolutionVote findFirst
   */
  export type SolutionVoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * Throw an Error if a SolutionVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SolutionVote to fetch.
     * 
    **/
    where?: SolutionVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolutionVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SolutionVotes.
     * 
    **/
    cursor?: SolutionVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolutionVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolutionVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SolutionVotes.
     * 
    **/
    distinct?: Enumerable<SolutionVoteScalarFieldEnum>
  }


  /**
   * SolutionVote findMany
   */
  export type SolutionVoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * Filter, which SolutionVotes to fetch.
     * 
    **/
    where?: SolutionVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolutionVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<SolutionVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SolutionVotes.
     * 
    **/
    cursor?: SolutionVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolutionVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolutionVotes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SolutionVoteScalarFieldEnum>
  }


  /**
   * SolutionVote create
   */
  export type SolutionVoteCreateArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * The data needed to create a SolutionVote.
     * 
    **/
    data: XOR<SolutionVoteCreateInput, SolutionVoteUncheckedCreateInput>
  }


  /**
   * SolutionVote createMany
   */
  export type SolutionVoteCreateManyArgs = {
    data: Enumerable<SolutionVoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SolutionVote update
   */
  export type SolutionVoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * The data needed to update a SolutionVote.
     * 
    **/
    data: XOR<SolutionVoteUpdateInput, SolutionVoteUncheckedUpdateInput>
    /**
     * Choose, which SolutionVote to update.
     * 
    **/
    where: SolutionVoteWhereUniqueInput
  }


  /**
   * SolutionVote updateMany
   */
  export type SolutionVoteUpdateManyArgs = {
    data: XOR<SolutionVoteUpdateManyMutationInput, SolutionVoteUncheckedUpdateManyInput>
    where?: SolutionVoteWhereInput
  }


  /**
   * SolutionVote upsert
   */
  export type SolutionVoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * The filter to search for the SolutionVote to update in case it exists.
     * 
    **/
    where: SolutionVoteWhereUniqueInput
    /**
     * In case the SolutionVote found by the `where` argument doesn't exist, create a new SolutionVote with this data.
     * 
    **/
    create: XOR<SolutionVoteCreateInput, SolutionVoteUncheckedCreateInput>
    /**
     * In case the SolutionVote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SolutionVoteUpdateInput, SolutionVoteUncheckedUpdateInput>
  }


  /**
   * SolutionVote delete
   */
  export type SolutionVoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
    /**
     * Filter which SolutionVote to delete.
     * 
    **/
    where: SolutionVoteWhereUniqueInput
  }


  /**
   * SolutionVote deleteMany
   */
  export type SolutionVoteDeleteManyArgs = {
    where?: SolutionVoteWhereInput
  }


  /**
   * SolutionVote without action
   */
  export type SolutionVoteArgs = {
    /**
     * Select specific fields to fetch from the SolutionVote
     * 
    **/
    select?: SolutionVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SolutionVoteInclude | null
  }



  /**
   * Model ProblemVote
   */


  export type AggregateProblemVote = {
    _count: ProblemVoteCountAggregateOutputType | null
    _min: ProblemVoteMinAggregateOutputType | null
    _max: ProblemVoteMaxAggregateOutputType | null
  }

  export type ProblemVoteMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemVoteMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemVoteCountAggregateOutputType = {
    id: number
    problemId: number
    userId: number
    value: number
    comment: number
    identifiers: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemVoteMinAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemVoteMaxAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemVoteCountAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    value?: true
    comment?: true
    identifiers?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemVoteAggregateArgs = {
    /**
     * Filter which ProblemVote to aggregate.
     * 
    **/
    where?: ProblemVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProblemVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemVotes
    **/
    _count?: true | ProblemVoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemVoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemVoteMaxAggregateInputType
  }

  export type GetProblemVoteAggregateType<T extends ProblemVoteAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemVote[P]>
      : GetScalarType<T[P], AggregateProblemVote[P]>
  }




  export type ProblemVoteGroupByArgs = {
    where?: ProblemVoteWhereInput
    orderBy?: Enumerable<ProblemVoteOrderByWithAggregationInput>
    by: Array<ProblemVoteScalarFieldEnum>
    having?: ProblemVoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemVoteCountAggregateInputType | true
    _min?: ProblemVoteMinAggregateInputType
    _max?: ProblemVoteMaxAggregateInputType
  }


  export type ProblemVoteGroupByOutputType = {
    id: string
    problemId: string
    userId: string
    value: VoteValue
    comment: string | null
    identifiers: SolutionIdentifier[]
    createdAt: Date
    updatedAt: Date
    _count: ProblemVoteCountAggregateOutputType | null
    _min: ProblemVoteMinAggregateOutputType | null
    _max: ProblemVoteMaxAggregateOutputType | null
  }

  type GetProblemVoteGroupByPayload<T extends ProblemVoteGroupByArgs> = Promise<
    Array<
      PickArray<ProblemVoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemVoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemVoteGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemVoteGroupByOutputType[P]>
        }
      >
    >


  export type ProblemVoteSelect = {
    id?: boolean
    problem?: boolean | ProblemArgs
    problemId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    value?: boolean
    comment?: boolean
    identifiers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemVoteInclude = {
    problem?: boolean | ProblemArgs
    user?: boolean | UserArgs
  }

  export type ProblemVoteGetPayload<
    S extends boolean | null | undefined | ProblemVoteArgs,
    U = keyof S
      > = S extends true
        ? ProblemVote
    : S extends undefined
    ? never
    : S extends ProblemVoteArgs | ProblemVoteFindManyArgs
    ?'include' extends U
    ? ProblemVote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'problem'
        ? ProblemGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProblemVote ?ProblemVote [P]
  : 
          P extends 'problem'
        ? ProblemGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : ProblemVote
  : ProblemVote


  type ProblemVoteCountArgs = Merge<
    Omit<ProblemVoteFindManyArgs, 'select' | 'include'> & {
      select?: ProblemVoteCountAggregateInputType | true
    }
  >

  export interface ProblemVoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProblemVote that matches the filter.
     * @param {ProblemVoteFindUniqueArgs} args - Arguments to find a ProblemVote
     * @example
     * // Get one ProblemVote
     * const problemVote = await prisma.problemVote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProblemVoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProblemVoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProblemVote'> extends True ? CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>> : CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote | null >, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T> | null >>

    /**
     * Find the first ProblemVote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteFindFirstArgs} args - Arguments to find a ProblemVote
     * @example
     * // Get one ProblemVote
     * const problemVote = await prisma.problemVote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProblemVoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProblemVoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProblemVote'> extends True ? CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>> : CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote | null >, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T> | null >>

    /**
     * Find zero or more ProblemVotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemVotes
     * const problemVotes = await prisma.problemVote.findMany()
     * 
     * // Get first 10 ProblemVotes
     * const problemVotes = await prisma.problemVote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemVoteWithIdOnly = await prisma.problemVote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProblemVoteFindManyArgs>(
      args?: SelectSubset<T, ProblemVoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ProblemVote>>, PrismaPromise<Array<ProblemVoteGetPayload<T>>>>

    /**
     * Create a ProblemVote.
     * @param {ProblemVoteCreateArgs} args - Arguments to create a ProblemVote.
     * @example
     * // Create one ProblemVote
     * const ProblemVote = await prisma.problemVote.create({
     *   data: {
     *     // ... data to create a ProblemVote
     *   }
     * })
     * 
    **/
    create<T extends ProblemVoteCreateArgs>(
      args: SelectSubset<T, ProblemVoteCreateArgs>
    ): CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>>

    /**
     * Create many ProblemVotes.
     *     @param {ProblemVoteCreateManyArgs} args - Arguments to create many ProblemVotes.
     *     @example
     *     // Create many ProblemVotes
     *     const problemVote = await prisma.problemVote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProblemVoteCreateManyArgs>(
      args?: SelectSubset<T, ProblemVoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProblemVote.
     * @param {ProblemVoteDeleteArgs} args - Arguments to delete one ProblemVote.
     * @example
     * // Delete one ProblemVote
     * const ProblemVote = await prisma.problemVote.delete({
     *   where: {
     *     // ... filter to delete one ProblemVote
     *   }
     * })
     * 
    **/
    delete<T extends ProblemVoteDeleteArgs>(
      args: SelectSubset<T, ProblemVoteDeleteArgs>
    ): CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>>

    /**
     * Update one ProblemVote.
     * @param {ProblemVoteUpdateArgs} args - Arguments to update one ProblemVote.
     * @example
     * // Update one ProblemVote
     * const problemVote = await prisma.problemVote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProblemVoteUpdateArgs>(
      args: SelectSubset<T, ProblemVoteUpdateArgs>
    ): CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>>

    /**
     * Delete zero or more ProblemVotes.
     * @param {ProblemVoteDeleteManyArgs} args - Arguments to filter ProblemVotes to delete.
     * @example
     * // Delete a few ProblemVotes
     * const { count } = await prisma.problemVote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProblemVoteDeleteManyArgs>(
      args?: SelectSubset<T, ProblemVoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemVotes
     * const problemVote = await prisma.problemVote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProblemVoteUpdateManyArgs>(
      args: SelectSubset<T, ProblemVoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProblemVote.
     * @param {ProblemVoteUpsertArgs} args - Arguments to update or create a ProblemVote.
     * @example
     * // Update or create a ProblemVote
     * const problemVote = await prisma.problemVote.upsert({
     *   create: {
     *     // ... data to create a ProblemVote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemVote we want to update
     *   }
     * })
    **/
    upsert<T extends ProblemVoteUpsertArgs>(
      args: SelectSubset<T, ProblemVoteUpsertArgs>
    ): CheckSelect<T, Prisma__ProblemVoteClient<ProblemVote>, Prisma__ProblemVoteClient<ProblemVoteGetPayload<T>>>

    /**
     * Count the number of ProblemVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteCountArgs} args - Arguments to filter ProblemVotes to count.
     * @example
     * // Count the number of ProblemVotes
     * const count = await prisma.problemVote.count({
     *   where: {
     *     // ... the filter for the ProblemVotes we want to count
     *   }
     * })
    **/
    count<T extends ProblemVoteCountArgs>(
      args?: Subset<T, ProblemVoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemVoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemVoteAggregateArgs>(args: Subset<T, ProblemVoteAggregateArgs>): PrismaPromise<GetProblemVoteAggregateType<T>>

    /**
     * Group by ProblemVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemVoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemVoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemVoteGroupByArgs['orderBy'] }
        : { orderBy?: ProblemVoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemVoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemVote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProblemVoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    problem<T extends ProblemArgs = {}>(args?: Subset<T, ProblemArgs>): CheckSelect<T, Prisma__ProblemClient<Problem | null >, Prisma__ProblemClient<ProblemGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProblemVote findUnique
   */
  export type ProblemVoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * Throw an Error if a ProblemVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProblemVote to fetch.
     * 
    **/
    where: ProblemVoteWhereUniqueInput
  }


  /**
   * ProblemVote findFirst
   */
  export type ProblemVoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * Throw an Error if a ProblemVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProblemVote to fetch.
     * 
    **/
    where?: ProblemVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemVotes.
     * 
    **/
    cursor?: ProblemVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemVotes.
     * 
    **/
    distinct?: Enumerable<ProblemVoteScalarFieldEnum>
  }


  /**
   * ProblemVote findMany
   */
  export type ProblemVoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * Filter, which ProblemVotes to fetch.
     * 
    **/
    where?: ProblemVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProblemVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemVotes.
     * 
    **/
    cursor?: ProblemVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemVotes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProblemVoteScalarFieldEnum>
  }


  /**
   * ProblemVote create
   */
  export type ProblemVoteCreateArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * The data needed to create a ProblemVote.
     * 
    **/
    data: XOR<ProblemVoteCreateInput, ProblemVoteUncheckedCreateInput>
  }


  /**
   * ProblemVote createMany
   */
  export type ProblemVoteCreateManyArgs = {
    data: Enumerable<ProblemVoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProblemVote update
   */
  export type ProblemVoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * The data needed to update a ProblemVote.
     * 
    **/
    data: XOR<ProblemVoteUpdateInput, ProblemVoteUncheckedUpdateInput>
    /**
     * Choose, which ProblemVote to update.
     * 
    **/
    where: ProblemVoteWhereUniqueInput
  }


  /**
   * ProblemVote updateMany
   */
  export type ProblemVoteUpdateManyArgs = {
    data: XOR<ProblemVoteUpdateManyMutationInput, ProblemVoteUncheckedUpdateManyInput>
    where?: ProblemVoteWhereInput
  }


  /**
   * ProblemVote upsert
   */
  export type ProblemVoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * The filter to search for the ProblemVote to update in case it exists.
     * 
    **/
    where: ProblemVoteWhereUniqueInput
    /**
     * In case the ProblemVote found by the `where` argument doesn't exist, create a new ProblemVote with this data.
     * 
    **/
    create: XOR<ProblemVoteCreateInput, ProblemVoteUncheckedCreateInput>
    /**
     * In case the ProblemVote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProblemVoteUpdateInput, ProblemVoteUncheckedUpdateInput>
  }


  /**
   * ProblemVote delete
   */
  export type ProblemVoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
    /**
     * Filter which ProblemVote to delete.
     * 
    **/
    where: ProblemVoteWhereUniqueInput
  }


  /**
   * ProblemVote deleteMany
   */
  export type ProblemVoteDeleteManyArgs = {
    where?: ProblemVoteWhereInput
  }


  /**
   * ProblemVote without action
   */
  export type ProblemVoteArgs = {
    /**
     * Select specific fields to fetch from the ProblemVote
     * 
    **/
    select?: ProblemVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProblemVoteInclude | null
  }



  /**
   * Model RequirementVote
   */


  export type AggregateRequirementVote = {
    _count: RequirementVoteCountAggregateOutputType | null
    _min: RequirementVoteMinAggregateOutputType | null
    _max: RequirementVoteMaxAggregateOutputType | null
  }

  export type RequirementVoteMinAggregateOutputType = {
    id: string | null
    requirementId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequirementVoteMaxAggregateOutputType = {
    id: string | null
    requirementId: string | null
    userId: string | null
    value: VoteValue | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequirementVoteCountAggregateOutputType = {
    id: number
    requirementId: number
    userId: number
    value: number
    comment: number
    identifiers: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequirementVoteMinAggregateInputType = {
    id?: true
    requirementId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequirementVoteMaxAggregateInputType = {
    id?: true
    requirementId?: true
    userId?: true
    value?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequirementVoteCountAggregateInputType = {
    id?: true
    requirementId?: true
    userId?: true
    value?: true
    comment?: true
    identifiers?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequirementVoteAggregateArgs = {
    /**
     * Filter which RequirementVote to aggregate.
     * 
    **/
    where?: RequirementVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RequirementVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequirementVotes
    **/
    _count?: true | RequirementVoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequirementVoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequirementVoteMaxAggregateInputType
  }

  export type GetRequirementVoteAggregateType<T extends RequirementVoteAggregateArgs> = {
        [P in keyof T & keyof AggregateRequirementVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequirementVote[P]>
      : GetScalarType<T[P], AggregateRequirementVote[P]>
  }




  export type RequirementVoteGroupByArgs = {
    where?: RequirementVoteWhereInput
    orderBy?: Enumerable<RequirementVoteOrderByWithAggregationInput>
    by: Array<RequirementVoteScalarFieldEnum>
    having?: RequirementVoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequirementVoteCountAggregateInputType | true
    _min?: RequirementVoteMinAggregateInputType
    _max?: RequirementVoteMaxAggregateInputType
  }


  export type RequirementVoteGroupByOutputType = {
    id: string
    requirementId: string
    userId: string
    value: VoteValue
    comment: string | null
    identifiers: SolutionIdentifier[]
    createdAt: Date
    updatedAt: Date
    _count: RequirementVoteCountAggregateOutputType | null
    _min: RequirementVoteMinAggregateOutputType | null
    _max: RequirementVoteMaxAggregateOutputType | null
  }

  type GetRequirementVoteGroupByPayload<T extends RequirementVoteGroupByArgs> = Promise<
    Array<
      PickArray<RequirementVoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequirementVoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequirementVoteGroupByOutputType[P]>
            : GetScalarType<T[P], RequirementVoteGroupByOutputType[P]>
        }
      >
    >


  export type RequirementVoteSelect = {
    id?: boolean
    requirement?: boolean | RequirementArgs
    requirementId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    value?: boolean
    comment?: boolean
    identifiers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequirementVoteInclude = {
    requirement?: boolean | RequirementArgs
    user?: boolean | UserArgs
  }

  export type RequirementVoteGetPayload<
    S extends boolean | null | undefined | RequirementVoteArgs,
    U = keyof S
      > = S extends true
        ? RequirementVote
    : S extends undefined
    ? never
    : S extends RequirementVoteArgs | RequirementVoteFindManyArgs
    ?'include' extends U
    ? RequirementVote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'requirement'
        ? RequirementGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof RequirementVote ?RequirementVote [P]
  : 
          P extends 'requirement'
        ? RequirementGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : RequirementVote
  : RequirementVote


  type RequirementVoteCountArgs = Merge<
    Omit<RequirementVoteFindManyArgs, 'select' | 'include'> & {
      select?: RequirementVoteCountAggregateInputType | true
    }
  >

  export interface RequirementVoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RequirementVote that matches the filter.
     * @param {RequirementVoteFindUniqueArgs} args - Arguments to find a RequirementVote
     * @example
     * // Get one RequirementVote
     * const requirementVote = await prisma.requirementVote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RequirementVoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RequirementVoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RequirementVote'> extends True ? CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>> : CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote | null >, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T> | null >>

    /**
     * Find the first RequirementVote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteFindFirstArgs} args - Arguments to find a RequirementVote
     * @example
     * // Get one RequirementVote
     * const requirementVote = await prisma.requirementVote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RequirementVoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RequirementVoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RequirementVote'> extends True ? CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>> : CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote | null >, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T> | null >>

    /**
     * Find zero or more RequirementVotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequirementVotes
     * const requirementVotes = await prisma.requirementVote.findMany()
     * 
     * // Get first 10 RequirementVotes
     * const requirementVotes = await prisma.requirementVote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requirementVoteWithIdOnly = await prisma.requirementVote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RequirementVoteFindManyArgs>(
      args?: SelectSubset<T, RequirementVoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RequirementVote>>, PrismaPromise<Array<RequirementVoteGetPayload<T>>>>

    /**
     * Create a RequirementVote.
     * @param {RequirementVoteCreateArgs} args - Arguments to create a RequirementVote.
     * @example
     * // Create one RequirementVote
     * const RequirementVote = await prisma.requirementVote.create({
     *   data: {
     *     // ... data to create a RequirementVote
     *   }
     * })
     * 
    **/
    create<T extends RequirementVoteCreateArgs>(
      args: SelectSubset<T, RequirementVoteCreateArgs>
    ): CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>>

    /**
     * Create many RequirementVotes.
     *     @param {RequirementVoteCreateManyArgs} args - Arguments to create many RequirementVotes.
     *     @example
     *     // Create many RequirementVotes
     *     const requirementVote = await prisma.requirementVote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RequirementVoteCreateManyArgs>(
      args?: SelectSubset<T, RequirementVoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RequirementVote.
     * @param {RequirementVoteDeleteArgs} args - Arguments to delete one RequirementVote.
     * @example
     * // Delete one RequirementVote
     * const RequirementVote = await prisma.requirementVote.delete({
     *   where: {
     *     // ... filter to delete one RequirementVote
     *   }
     * })
     * 
    **/
    delete<T extends RequirementVoteDeleteArgs>(
      args: SelectSubset<T, RequirementVoteDeleteArgs>
    ): CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>>

    /**
     * Update one RequirementVote.
     * @param {RequirementVoteUpdateArgs} args - Arguments to update one RequirementVote.
     * @example
     * // Update one RequirementVote
     * const requirementVote = await prisma.requirementVote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RequirementVoteUpdateArgs>(
      args: SelectSubset<T, RequirementVoteUpdateArgs>
    ): CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>>

    /**
     * Delete zero or more RequirementVotes.
     * @param {RequirementVoteDeleteManyArgs} args - Arguments to filter RequirementVotes to delete.
     * @example
     * // Delete a few RequirementVotes
     * const { count } = await prisma.requirementVote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RequirementVoteDeleteManyArgs>(
      args?: SelectSubset<T, RequirementVoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequirementVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequirementVotes
     * const requirementVote = await prisma.requirementVote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RequirementVoteUpdateManyArgs>(
      args: SelectSubset<T, RequirementVoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RequirementVote.
     * @param {RequirementVoteUpsertArgs} args - Arguments to update or create a RequirementVote.
     * @example
     * // Update or create a RequirementVote
     * const requirementVote = await prisma.requirementVote.upsert({
     *   create: {
     *     // ... data to create a RequirementVote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequirementVote we want to update
     *   }
     * })
    **/
    upsert<T extends RequirementVoteUpsertArgs>(
      args: SelectSubset<T, RequirementVoteUpsertArgs>
    ): CheckSelect<T, Prisma__RequirementVoteClient<RequirementVote>, Prisma__RequirementVoteClient<RequirementVoteGetPayload<T>>>

    /**
     * Count the number of RequirementVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteCountArgs} args - Arguments to filter RequirementVotes to count.
     * @example
     * // Count the number of RequirementVotes
     * const count = await prisma.requirementVote.count({
     *   where: {
     *     // ... the filter for the RequirementVotes we want to count
     *   }
     * })
    **/
    count<T extends RequirementVoteCountArgs>(
      args?: Subset<T, RequirementVoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequirementVoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequirementVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequirementVoteAggregateArgs>(args: Subset<T, RequirementVoteAggregateArgs>): PrismaPromise<GetRequirementVoteAggregateType<T>>

    /**
     * Group by RequirementVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequirementVoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequirementVoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequirementVoteGroupByArgs['orderBy'] }
        : { orderBy?: RequirementVoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequirementVoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequirementVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequirementVote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RequirementVoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    requirement<T extends RequirementArgs = {}>(args?: Subset<T, RequirementArgs>): CheckSelect<T, Prisma__RequirementClient<Requirement | null >, Prisma__RequirementClient<RequirementGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * RequirementVote findUnique
   */
  export type RequirementVoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * Throw an Error if a RequirementVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequirementVote to fetch.
     * 
    **/
    where: RequirementVoteWhereUniqueInput
  }


  /**
   * RequirementVote findFirst
   */
  export type RequirementVoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * Throw an Error if a RequirementVote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RequirementVote to fetch.
     * 
    **/
    where?: RequirementVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequirementVotes.
     * 
    **/
    cursor?: RequirementVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementVotes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequirementVotes.
     * 
    **/
    distinct?: Enumerable<RequirementVoteScalarFieldEnum>
  }


  /**
   * RequirementVote findMany
   */
  export type RequirementVoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * Filter, which RequirementVotes to fetch.
     * 
    **/
    where?: RequirementVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequirementVotes to fetch.
     * 
    **/
    orderBy?: Enumerable<RequirementVoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequirementVotes.
     * 
    **/
    cursor?: RequirementVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequirementVotes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequirementVotes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RequirementVoteScalarFieldEnum>
  }


  /**
   * RequirementVote create
   */
  export type RequirementVoteCreateArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * The data needed to create a RequirementVote.
     * 
    **/
    data: XOR<RequirementVoteCreateInput, RequirementVoteUncheckedCreateInput>
  }


  /**
   * RequirementVote createMany
   */
  export type RequirementVoteCreateManyArgs = {
    data: Enumerable<RequirementVoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RequirementVote update
   */
  export type RequirementVoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * The data needed to update a RequirementVote.
     * 
    **/
    data: XOR<RequirementVoteUpdateInput, RequirementVoteUncheckedUpdateInput>
    /**
     * Choose, which RequirementVote to update.
     * 
    **/
    where: RequirementVoteWhereUniqueInput
  }


  /**
   * RequirementVote updateMany
   */
  export type RequirementVoteUpdateManyArgs = {
    data: XOR<RequirementVoteUpdateManyMutationInput, RequirementVoteUncheckedUpdateManyInput>
    where?: RequirementVoteWhereInput
  }


  /**
   * RequirementVote upsert
   */
  export type RequirementVoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * The filter to search for the RequirementVote to update in case it exists.
     * 
    **/
    where: RequirementVoteWhereUniqueInput
    /**
     * In case the RequirementVote found by the `where` argument doesn't exist, create a new RequirementVote with this data.
     * 
    **/
    create: XOR<RequirementVoteCreateInput, RequirementVoteUncheckedCreateInput>
    /**
     * In case the RequirementVote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RequirementVoteUpdateInput, RequirementVoteUncheckedUpdateInput>
  }


  /**
   * RequirementVote delete
   */
  export type RequirementVoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
    /**
     * Filter which RequirementVote to delete.
     * 
    **/
    where: RequirementVoteWhereUniqueInput
  }


  /**
   * RequirementVote deleteMany
   */
  export type RequirementVoteDeleteManyArgs = {
    where?: RequirementVoteWhereInput
  }


  /**
   * RequirementVote without action
   */
  export type RequirementVoteArgs = {
    /**
     * Select specific fields to fetch from the RequirementVote
     * 
    **/
    select?: RequirementVoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RequirementVoteInclude | null
  }



  /**
   * Model Colorscheme
   */


  export type AggregateColorscheme = {
    _count: ColorschemeCountAggregateOutputType | null
    _min: ColorschemeMinAggregateOutputType | null
    _max: ColorschemeMaxAggregateOutputType | null
  }

  export type ColorschemeMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColorschemeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColorschemeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ColorschemeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColorschemeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColorschemeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ColorschemeAggregateArgs = {
    /**
     * Filter which Colorscheme to aggregate.
     * 
    **/
    where?: ColorschemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colorschemes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColorschemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ColorschemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colorschemes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colorschemes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colorschemes
    **/
    _count?: true | ColorschemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColorschemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColorschemeMaxAggregateInputType
  }

  export type GetColorschemeAggregateType<T extends ColorschemeAggregateArgs> = {
        [P in keyof T & keyof AggregateColorscheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColorscheme[P]>
      : GetScalarType<T[P], AggregateColorscheme[P]>
  }




  export type ColorschemeGroupByArgs = {
    where?: ColorschemeWhereInput
    orderBy?: Enumerable<ColorschemeOrderByWithAggregationInput>
    by: Array<ColorschemeScalarFieldEnum>
    having?: ColorschemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColorschemeCountAggregateInputType | true
    _min?: ColorschemeMinAggregateInputType
    _max?: ColorschemeMaxAggregateInputType
  }


  export type ColorschemeGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ColorschemeCountAggregateOutputType | null
    _min: ColorschemeMinAggregateOutputType | null
    _max: ColorschemeMaxAggregateOutputType | null
  }

  type GetColorschemeGroupByPayload<T extends ColorschemeGroupByArgs> = Promise<
    Array<
      PickArray<ColorschemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColorschemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColorschemeGroupByOutputType[P]>
            : GetScalarType<T[P], ColorschemeGroupByOutputType[P]>
        }
      >
    >


  export type ColorschemeSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | UserFindManyArgs
    _count?: boolean | ColorschemeCountOutputTypeArgs
  }

  export type ColorschemeInclude = {
    users?: boolean | UserFindManyArgs
    _count?: boolean | ColorschemeCountOutputTypeArgs
  }

  export type ColorschemeGetPayload<
    S extends boolean | null | undefined | ColorschemeArgs,
    U = keyof S
      > = S extends true
        ? Colorscheme
    : S extends undefined
    ? never
    : S extends ColorschemeArgs | ColorschemeFindManyArgs
    ?'include' extends U
    ? Colorscheme  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ColorschemeCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Colorscheme ?Colorscheme [P]
  : 
          P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ColorschemeCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Colorscheme
  : Colorscheme


  type ColorschemeCountArgs = Merge<
    Omit<ColorschemeFindManyArgs, 'select' | 'include'> & {
      select?: ColorschemeCountAggregateInputType | true
    }
  >

  export interface ColorschemeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Colorscheme that matches the filter.
     * @param {ColorschemeFindUniqueArgs} args - Arguments to find a Colorscheme
     * @example
     * // Get one Colorscheme
     * const colorscheme = await prisma.colorscheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ColorschemeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ColorschemeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Colorscheme'> extends True ? CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>> : CheckSelect<T, Prisma__ColorschemeClient<Colorscheme | null >, Prisma__ColorschemeClient<ColorschemeGetPayload<T> | null >>

    /**
     * Find the first Colorscheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeFindFirstArgs} args - Arguments to find a Colorscheme
     * @example
     * // Get one Colorscheme
     * const colorscheme = await prisma.colorscheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ColorschemeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ColorschemeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Colorscheme'> extends True ? CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>> : CheckSelect<T, Prisma__ColorschemeClient<Colorscheme | null >, Prisma__ColorschemeClient<ColorschemeGetPayload<T> | null >>

    /**
     * Find zero or more Colorschemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colorschemes
     * const colorschemes = await prisma.colorscheme.findMany()
     * 
     * // Get first 10 Colorschemes
     * const colorschemes = await prisma.colorscheme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colorschemeWithIdOnly = await prisma.colorscheme.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ColorschemeFindManyArgs>(
      args?: SelectSubset<T, ColorschemeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Colorscheme>>, PrismaPromise<Array<ColorschemeGetPayload<T>>>>

    /**
     * Create a Colorscheme.
     * @param {ColorschemeCreateArgs} args - Arguments to create a Colorscheme.
     * @example
     * // Create one Colorscheme
     * const Colorscheme = await prisma.colorscheme.create({
     *   data: {
     *     // ... data to create a Colorscheme
     *   }
     * })
     * 
    **/
    create<T extends ColorschemeCreateArgs>(
      args: SelectSubset<T, ColorschemeCreateArgs>
    ): CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>>

    /**
     * Create many Colorschemes.
     *     @param {ColorschemeCreateManyArgs} args - Arguments to create many Colorschemes.
     *     @example
     *     // Create many Colorschemes
     *     const colorscheme = await prisma.colorscheme.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ColorschemeCreateManyArgs>(
      args?: SelectSubset<T, ColorschemeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Colorscheme.
     * @param {ColorschemeDeleteArgs} args - Arguments to delete one Colorscheme.
     * @example
     * // Delete one Colorscheme
     * const Colorscheme = await prisma.colorscheme.delete({
     *   where: {
     *     // ... filter to delete one Colorscheme
     *   }
     * })
     * 
    **/
    delete<T extends ColorschemeDeleteArgs>(
      args: SelectSubset<T, ColorschemeDeleteArgs>
    ): CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>>

    /**
     * Update one Colorscheme.
     * @param {ColorschemeUpdateArgs} args - Arguments to update one Colorscheme.
     * @example
     * // Update one Colorscheme
     * const colorscheme = await prisma.colorscheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ColorschemeUpdateArgs>(
      args: SelectSubset<T, ColorschemeUpdateArgs>
    ): CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>>

    /**
     * Delete zero or more Colorschemes.
     * @param {ColorschemeDeleteManyArgs} args - Arguments to filter Colorschemes to delete.
     * @example
     * // Delete a few Colorschemes
     * const { count } = await prisma.colorscheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ColorschemeDeleteManyArgs>(
      args?: SelectSubset<T, ColorschemeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colorschemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colorschemes
     * const colorscheme = await prisma.colorscheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ColorschemeUpdateManyArgs>(
      args: SelectSubset<T, ColorschemeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Colorscheme.
     * @param {ColorschemeUpsertArgs} args - Arguments to update or create a Colorscheme.
     * @example
     * // Update or create a Colorscheme
     * const colorscheme = await prisma.colorscheme.upsert({
     *   create: {
     *     // ... data to create a Colorscheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colorscheme we want to update
     *   }
     * })
    **/
    upsert<T extends ColorschemeUpsertArgs>(
      args: SelectSubset<T, ColorschemeUpsertArgs>
    ): CheckSelect<T, Prisma__ColorschemeClient<Colorscheme>, Prisma__ColorschemeClient<ColorschemeGetPayload<T>>>

    /**
     * Count the number of Colorschemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeCountArgs} args - Arguments to filter Colorschemes to count.
     * @example
     * // Count the number of Colorschemes
     * const count = await prisma.colorscheme.count({
     *   where: {
     *     // ... the filter for the Colorschemes we want to count
     *   }
     * })
    **/
    count<T extends ColorschemeCountArgs>(
      args?: Subset<T, ColorschemeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColorschemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colorscheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColorschemeAggregateArgs>(args: Subset<T, ColorschemeAggregateArgs>): PrismaPromise<GetColorschemeAggregateType<T>>

    /**
     * Group by Colorscheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorschemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColorschemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColorschemeGroupByArgs['orderBy'] }
        : { orderBy?: ColorschemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColorschemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorschemeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Colorscheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ColorschemeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Colorscheme findUnique
   */
  export type ColorschemeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * Throw an Error if a Colorscheme can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Colorscheme to fetch.
     * 
    **/
    where: ColorschemeWhereUniqueInput
  }


  /**
   * Colorscheme findFirst
   */
  export type ColorschemeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * Throw an Error if a Colorscheme can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Colorscheme to fetch.
     * 
    **/
    where?: ColorschemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colorschemes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColorschemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colorschemes.
     * 
    **/
    cursor?: ColorschemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colorschemes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colorschemes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colorschemes.
     * 
    **/
    distinct?: Enumerable<ColorschemeScalarFieldEnum>
  }


  /**
   * Colorscheme findMany
   */
  export type ColorschemeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * Filter, which Colorschemes to fetch.
     * 
    **/
    where?: ColorschemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colorschemes to fetch.
     * 
    **/
    orderBy?: Enumerable<ColorschemeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colorschemes.
     * 
    **/
    cursor?: ColorschemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colorschemes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colorschemes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ColorschemeScalarFieldEnum>
  }


  /**
   * Colorscheme create
   */
  export type ColorschemeCreateArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * The data needed to create a Colorscheme.
     * 
    **/
    data: XOR<ColorschemeCreateInput, ColorschemeUncheckedCreateInput>
  }


  /**
   * Colorscheme createMany
   */
  export type ColorschemeCreateManyArgs = {
    data: Enumerable<ColorschemeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Colorscheme update
   */
  export type ColorschemeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * The data needed to update a Colorscheme.
     * 
    **/
    data: XOR<ColorschemeUpdateInput, ColorschemeUncheckedUpdateInput>
    /**
     * Choose, which Colorscheme to update.
     * 
    **/
    where: ColorschemeWhereUniqueInput
  }


  /**
   * Colorscheme updateMany
   */
  export type ColorschemeUpdateManyArgs = {
    data: XOR<ColorschemeUpdateManyMutationInput, ColorschemeUncheckedUpdateManyInput>
    where?: ColorschemeWhereInput
  }


  /**
   * Colorscheme upsert
   */
  export type ColorschemeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * The filter to search for the Colorscheme to update in case it exists.
     * 
    **/
    where: ColorschemeWhereUniqueInput
    /**
     * In case the Colorscheme found by the `where` argument doesn't exist, create a new Colorscheme with this data.
     * 
    **/
    create: XOR<ColorschemeCreateInput, ColorschemeUncheckedCreateInput>
    /**
     * In case the Colorscheme was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ColorschemeUpdateInput, ColorschemeUncheckedUpdateInput>
  }


  /**
   * Colorscheme delete
   */
  export type ColorschemeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
    /**
     * Filter which Colorscheme to delete.
     * 
    **/
    where: ColorschemeWhereUniqueInput
  }


  /**
   * Colorscheme deleteMany
   */
  export type ColorschemeDeleteManyArgs = {
    where?: ColorschemeWhereInput
  }


  /**
   * Colorscheme without action
   */
  export type ColorschemeArgs = {
    /**
     * Select specific fields to fetch from the Colorscheme
     * 
    **/
    select?: ColorschemeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ColorschemeInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    name: 'name',
    image: 'image',
    created: 'created',
    updatedAt: 'updatedAt',
    colorschemeId: 'colorschemeId',
    siteMode: 'siteMode'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProblemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    desc: 'desc',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


  export const RequirementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    description: 'description'
  };

  export type RequirementScalarFieldEnum = (typeof RequirementScalarFieldEnum)[keyof typeof RequirementScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const RequirementTagScalarFieldEnum: {
    id: 'id',
    requirementId: 'requirementId',
    tagId: 'tagId'
  };

  export type RequirementTagScalarFieldEnum = (typeof RequirementTagScalarFieldEnum)[keyof typeof RequirementTagScalarFieldEnum]


  export const ProblemTagScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    tagId: 'tagId'
  };

  export type ProblemTagScalarFieldEnum = (typeof ProblemTagScalarFieldEnum)[keyof typeof ProblemTagScalarFieldEnum]


  export const SolutionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    problemId: 'problemId',
    markedBest: 'markedBest',
    language: 'language',
    content: 'content',
    publish: 'publish',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SolutionScalarFieldEnum = (typeof SolutionScalarFieldEnum)[keyof typeof SolutionScalarFieldEnum]


  export const SolutionVoteScalarFieldEnum: {
    id: 'id',
    solutionId: 'solutionId',
    userId: 'userId',
    value: 'value',
    comment: 'comment',
    identifiers: 'identifiers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SolutionVoteScalarFieldEnum = (typeof SolutionVoteScalarFieldEnum)[keyof typeof SolutionVoteScalarFieldEnum]


  export const ProblemVoteScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    userId: 'userId',
    value: 'value',
    comment: 'comment',
    identifiers: 'identifiers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemVoteScalarFieldEnum = (typeof ProblemVoteScalarFieldEnum)[keyof typeof ProblemVoteScalarFieldEnum]


  export const RequirementVoteScalarFieldEnum: {
    id: 'id',
    requirementId: 'requirementId',
    userId: 'userId',
    value: 'value',
    comment: 'comment',
    identifiers: 'identifiers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequirementVoteScalarFieldEnum = (typeof RequirementVoteScalarFieldEnum)[keyof typeof RequirementVoteScalarFieldEnum]


  export const ColorschemeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ColorschemeScalarFieldEnum = (typeof ColorschemeScalarFieldEnum)[keyof typeof ColorschemeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    created?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    colorschemeId?: StringFilter | string
    siteMode?: EnumSiteModeFilter | SiteMode
    colorscheme?: XOR<ColorschemeRelationFilter, ColorschemeWhereInput>
    problems?: ProblemListRelationFilter
    solutions?: SolutionListRelationFilter
    requirements?: RequirementListRelationFilter
    problemVotes?: ProblemVoteListRelationFilter
    solutionVotes?: SolutionVoteListRelationFilter
    requirementVotes?: RequirementVoteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    image?: SortOrder
    created?: SortOrder
    updatedAt?: SortOrder
    colorschemeId?: SortOrder
    siteMode?: SortOrder
    colorscheme?: ColorschemeOrderByWithRelationInput
    problems?: ProblemOrderByRelationAggregateInput
    solutions?: SolutionOrderByRelationAggregateInput
    requirements?: RequirementOrderByRelationAggregateInput
    problemVotes?: ProblemVoteOrderByRelationAggregateInput
    solutionVotes?: SolutionVoteOrderByRelationAggregateInput
    requirementVotes?: RequirementVoteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    image?: SortOrder
    created?: SortOrder
    updatedAt?: SortOrder
    colorschemeId?: SortOrder
    siteMode?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    created?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    colorschemeId?: StringWithAggregatesFilter | string
    siteMode?: EnumSiteModeWithAggregatesFilter | SiteMode
  }

  export type ProblemWhereInput = {
    AND?: Enumerable<ProblemWhereInput>
    OR?: Enumerable<ProblemWhereInput>
    NOT?: Enumerable<ProblemWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    desc?: StringFilter | string
    language?: EnumLanguageNullableFilter | Language | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    solutions?: SolutionListRelationFilter
    tags?: ProblemTagListRelationFilter
    votes?: ProblemVoteListRelationFilter
  }

  export type ProblemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    desc?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    solutions?: SolutionOrderByRelationAggregateInput
    tags?: ProblemTagOrderByRelationAggregateInput
    votes?: ProblemVoteOrderByRelationAggregateInput
  }

  export type ProblemWhereUniqueInput = {
    id?: string
  }

  export type ProblemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    desc?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemCountOrderByAggregateInput
    _max?: ProblemMaxOrderByAggregateInput
    _min?: ProblemMinOrderByAggregateInput
  }

  export type ProblemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProblemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProblemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProblemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    language?: EnumLanguageNullableWithAggregatesFilter | Language | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RequirementWhereInput = {
    AND?: Enumerable<RequirementWhereInput>
    OR?: Enumerable<RequirementWhereInput>
    NOT?: Enumerable<RequirementWhereInput>
    id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    description?: StringFilter | string
    tags?: RequirementTagListRelationFilter
    votes?: RequirementVoteListRelationFilter
  }

  export type RequirementOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    tags?: RequirementTagOrderByRelationAggregateInput
    votes?: RequirementVoteOrderByRelationAggregateInput
  }

  export type RequirementWhereUniqueInput = {
    id?: string
  }

  export type RequirementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    _count?: RequirementCountOrderByAggregateInput
    _max?: RequirementMaxOrderByAggregateInput
    _min?: RequirementMinOrderByAggregateInput
  }

  export type RequirementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RequirementScalarWhereWithAggregatesInput>
    OR?: Enumerable<RequirementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RequirementScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    description?: StringWithAggregatesFilter | string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    requirements?: RequirementTagListRelationFilter
    problems?: ProblemTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    requirements?: RequirementTagOrderByRelationAggregateInput
    problems?: ProblemTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = {
    id?: string
  }

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type RequirementTagWhereInput = {
    AND?: Enumerable<RequirementTagWhereInput>
    OR?: Enumerable<RequirementTagWhereInput>
    NOT?: Enumerable<RequirementTagWhereInput>
    id?: StringFilter | string
    requirement?: XOR<RequirementRelationFilter, RequirementWhereInput>
    requirementId?: StringFilter | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    tagId?: StringFilter | string
  }

  export type RequirementTagOrderByWithRelationInput = {
    id?: SortOrder
    requirement?: RequirementOrderByWithRelationInput
    requirementId?: SortOrder
    tag?: TagOrderByWithRelationInput
    tagId?: SortOrder
  }

  export type RequirementTagWhereUniqueInput = {
    id?: string
  }

  export type RequirementTagOrderByWithAggregationInput = {
    id?: SortOrder
    requirementId?: SortOrder
    tagId?: SortOrder
    _count?: RequirementTagCountOrderByAggregateInput
    _max?: RequirementTagMaxOrderByAggregateInput
    _min?: RequirementTagMinOrderByAggregateInput
  }

  export type RequirementTagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RequirementTagScalarWhereWithAggregatesInput>
    OR?: Enumerable<RequirementTagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RequirementTagScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    requirementId?: StringWithAggregatesFilter | string
    tagId?: StringWithAggregatesFilter | string
  }

  export type ProblemTagWhereInput = {
    AND?: Enumerable<ProblemTagWhereInput>
    OR?: Enumerable<ProblemTagWhereInput>
    NOT?: Enumerable<ProblemTagWhereInput>
    id?: StringFilter | string
    problem?: XOR<ProblemRelationFilter, ProblemWhereInput>
    problemId?: StringFilter | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    tagId?: StringFilter | string
  }

  export type ProblemTagOrderByWithRelationInput = {
    id?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    problemId?: SortOrder
    tag?: TagOrderByWithRelationInput
    tagId?: SortOrder
  }

  export type ProblemTagWhereUniqueInput = {
    id?: string
  }

  export type ProblemTagOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    tagId?: SortOrder
    _count?: ProblemTagCountOrderByAggregateInput
    _max?: ProblemTagMaxOrderByAggregateInput
    _min?: ProblemTagMinOrderByAggregateInput
  }

  export type ProblemTagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProblemTagScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProblemTagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProblemTagScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    problemId?: StringWithAggregatesFilter | string
    tagId?: StringWithAggregatesFilter | string
  }

  export type SolutionWhereInput = {
    AND?: Enumerable<SolutionWhereInput>
    OR?: Enumerable<SolutionWhereInput>
    NOT?: Enumerable<SolutionWhereInput>
    id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    problem?: XOR<ProblemRelationFilter, ProblemWhereInput>
    problemId?: StringFilter | string
    markedBest?: BoolFilter | boolean
    language?: EnumLanguageFilter | Language
    content?: StringFilter | string
    publish?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    votes?: SolutionVoteListRelationFilter
  }

  export type SolutionOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    problemId?: SortOrder
    markedBest?: SortOrder
    language?: SortOrder
    content?: SortOrder
    publish?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SolutionVoteOrderByRelationAggregateInput
  }

  export type SolutionWhereUniqueInput = {
    id?: string
  }

  export type SolutionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    markedBest?: SortOrder
    language?: SortOrder
    content?: SortOrder
    publish?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SolutionCountOrderByAggregateInput
    _max?: SolutionMaxOrderByAggregateInput
    _min?: SolutionMinOrderByAggregateInput
  }

  export type SolutionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SolutionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SolutionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SolutionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    problemId?: StringWithAggregatesFilter | string
    markedBest?: BoolWithAggregatesFilter | boolean
    language?: EnumLanguageWithAggregatesFilter | Language
    content?: StringWithAggregatesFilter | string
    publish?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SolutionVoteWhereInput = {
    AND?: Enumerable<SolutionVoteWhereInput>
    OR?: Enumerable<SolutionVoteWhereInput>
    NOT?: Enumerable<SolutionVoteWhereInput>
    id?: StringFilter | string
    solution?: XOR<SolutionRelationFilter, SolutionWhereInput>
    solutionId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SolutionVoteOrderByWithRelationInput = {
    id?: SortOrder
    solution?: SolutionOrderByWithRelationInput
    solutionId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolutionVoteWhereUniqueInput = {
    id?: string
  }

  export type SolutionVoteOrderByWithAggregationInput = {
    id?: SortOrder
    solutionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SolutionVoteCountOrderByAggregateInput
    _max?: SolutionVoteMaxOrderByAggregateInput
    _min?: SolutionVoteMinOrderByAggregateInput
  }

  export type SolutionVoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SolutionVoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SolutionVoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SolutionVoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    solutionId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    value?: EnumVoteValueWithAggregatesFilter | VoteValue
    comment?: StringNullableWithAggregatesFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProblemVoteWhereInput = {
    AND?: Enumerable<ProblemVoteWhereInput>
    OR?: Enumerable<ProblemVoteWhereInput>
    NOT?: Enumerable<ProblemVoteWhereInput>
    id?: StringFilter | string
    problem?: XOR<ProblemRelationFilter, ProblemWhereInput>
    problemId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProblemVoteOrderByWithRelationInput = {
    id?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    problemId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemVoteWhereUniqueInput = {
    id?: string
  }

  export type ProblemVoteOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemVoteCountOrderByAggregateInput
    _max?: ProblemVoteMaxOrderByAggregateInput
    _min?: ProblemVoteMinOrderByAggregateInput
  }

  export type ProblemVoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProblemVoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProblemVoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProblemVoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    problemId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    value?: EnumVoteValueWithAggregatesFilter | VoteValue
    comment?: StringNullableWithAggregatesFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RequirementVoteWhereInput = {
    AND?: Enumerable<RequirementVoteWhereInput>
    OR?: Enumerable<RequirementVoteWhereInput>
    NOT?: Enumerable<RequirementVoteWhereInput>
    id?: StringFilter | string
    requirement?: XOR<RequirementRelationFilter, RequirementWhereInput>
    requirementId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type RequirementVoteOrderByWithRelationInput = {
    id?: SortOrder
    requirement?: RequirementOrderByWithRelationInput
    requirementId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequirementVoteWhereUniqueInput = {
    id?: string
  }

  export type RequirementVoteOrderByWithAggregationInput = {
    id?: SortOrder
    requirementId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequirementVoteCountOrderByAggregateInput
    _max?: RequirementVoteMaxOrderByAggregateInput
    _min?: RequirementVoteMinOrderByAggregateInput
  }

  export type RequirementVoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RequirementVoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<RequirementVoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RequirementVoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    requirementId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    value?: EnumVoteValueWithAggregatesFilter | VoteValue
    comment?: StringNullableWithAggregatesFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ColorschemeWhereInput = {
    AND?: Enumerable<ColorschemeWhereInput>
    OR?: Enumerable<ColorschemeWhereInput>
    NOT?: Enumerable<ColorschemeWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    users?: UserListRelationFilter
  }

  export type ColorschemeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type ColorschemeWhereUniqueInput = {
    id?: string
  }

  export type ColorschemeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ColorschemeCountOrderByAggregateInput
    _max?: ColorschemeMaxOrderByAggregateInput
    _min?: ColorschemeMinOrderByAggregateInput
  }

  export type ColorschemeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ColorschemeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ColorschemeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ColorschemeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
  }

  export type ProblemCreateInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemsInput
    solutions?: SolutionCreateNestedManyWithoutProblemInput
    tags?: ProblemTagCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateInput = {
    id?: string
    userId: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solutions?: SolutionUncheckedCreateNestedManyWithoutProblemInput
    tags?: ProblemTagUncheckedCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemsInput
    solutions?: SolutionUpdateManyWithoutProblemInput
    tags?: ProblemTagUpdateManyWithoutProblemInput
    votes?: ProblemVoteUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solutions?: SolutionUncheckedUpdateManyWithoutProblemInput
    tags?: ProblemTagUncheckedUpdateManyWithoutProblemInput
    votes?: ProblemVoteUncheckedUpdateManyWithoutProblemInput
  }

  export type ProblemCreateManyInput = {
    id?: string
    userId: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequirementCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    user: UserCreateNestedOneWithoutRequirementsInput
    tags?: RequirementTagCreateNestedManyWithoutRequirementInput
    votes?: RequirementVoteCreateNestedManyWithoutRequirementInput
  }

  export type RequirementUncheckedCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    tags?: RequirementTagUncheckedCreateNestedManyWithoutRequirementInput
    votes?: RequirementVoteUncheckedCreateNestedManyWithoutRequirementInput
  }

  export type RequirementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRequirementsInput
    tags?: RequirementTagUpdateManyWithoutRequirementInput
    votes?: RequirementVoteUpdateManyWithoutRequirementInput
  }

  export type RequirementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: RequirementTagUncheckedUpdateManyWithoutRequirementInput
    votes?: RequirementVoteUncheckedUpdateManyWithoutRequirementInput
  }

  export type RequirementCreateManyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
  }

  export type RequirementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    requirements?: RequirementTagCreateNestedManyWithoutTagInput
    problems?: ProblemTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    requirements?: RequirementTagUncheckedCreateNestedManyWithoutTagInput
    problems?: ProblemTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirements?: RequirementTagUpdateManyWithoutTagInput
    problems?: ProblemTagUpdateManyWithoutTagInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirements?: RequirementTagUncheckedUpdateManyWithoutTagInput
    problems?: ProblemTagUncheckedUpdateManyWithoutTagInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementTagCreateInput = {
    id?: string
    requirement: RequirementCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutRequirementsInput
  }

  export type RequirementTagUncheckedCreateInput = {
    id?: string
    requirementId: string
    tagId: string
  }

  export type RequirementTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement?: RequirementUpdateOneRequiredWithoutTagsInput
    tag?: TagUpdateOneRequiredWithoutRequirementsInput
  }

  export type RequirementTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementTagCreateManyInput = {
    id?: string
    requirementId: string
    tagId: string
  }

  export type RequirementTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagCreateInput = {
    id?: string
    problem: ProblemCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutProblemsInput
  }

  export type ProblemTagUncheckedCreateInput = {
    id?: string
    problemId: string
    tagId: string
  }

  export type ProblemTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problem?: ProblemUpdateOneRequiredWithoutTagsInput
    tag?: TagUpdateOneRequiredWithoutProblemsInput
  }

  export type ProblemTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagCreateManyInput = {
    id?: string
    problemId: string
    tagId: string
  }

  export type ProblemTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionCreateInput = {
    id?: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSolutionsInput
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    votes?: SolutionVoteCreateNestedManyWithoutSolutionInput
  }

  export type SolutionUncheckedCreateInput = {
    id?: string
    userId: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: SolutionVoteUncheckedCreateNestedManyWithoutSolutionInput
  }

  export type SolutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSolutionsInput
    problem?: ProblemUpdateOneRequiredWithoutSolutionsInput
    votes?: SolutionVoteUpdateManyWithoutSolutionInput
  }

  export type SolutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: SolutionVoteUncheckedUpdateManyWithoutSolutionInput
  }

  export type SolutionCreateManyInput = {
    id?: string
    userId: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SolutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SolutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SolutionVoteCreateInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    solution: SolutionCreateNestedOneWithoutVotesInput
    user: UserCreateNestedOneWithoutSolutionVotesInput
  }

  export type SolutionVoteUncheckedCreateInput = {
    id?: string
    solutionId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    solution?: SolutionUpdateOneRequiredWithoutVotesInput
    user?: UserUpdateOneRequiredWithoutSolutionVotesInput
  }

  export type SolutionVoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    solutionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteCreateManyInput = {
    id?: string
    solutionId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    solutionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteCreateInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    problem: ProblemCreateNestedOneWithoutVotesInput
    user: UserCreateNestedOneWithoutProblemVotesInput
  }

  export type ProblemVoteUncheckedCreateInput = {
    id?: string
    problemId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    problem?: ProblemUpdateOneRequiredWithoutVotesInput
    user?: UserUpdateOneRequiredWithoutProblemVotesInput
  }

  export type ProblemVoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteCreateManyInput = {
    id?: string
    problemId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    requirement: RequirementCreateNestedOneWithoutVotesInput
    user: UserCreateNestedOneWithoutRequirementVotesInput
  }

  export type RequirementVoteUncheckedCreateInput = {
    id?: string
    requirementId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    requirement?: RequirementUpdateOneRequiredWithoutVotesInput
    user?: UserUpdateOneRequiredWithoutRequirementVotesInput
  }

  export type RequirementVoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateManyInput = {
    id?: string
    requirementId: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ColorschemeCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutColorschemeInput
  }

  export type ColorschemeUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutColorschemeInput
  }

  export type ColorschemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutColorschemeInput
  }

  export type ColorschemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutColorschemeInput
  }

  export type ColorschemeCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorschemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorschemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumSiteModeFilter = {
    equals?: SiteMode
    in?: Enumerable<SiteMode>
    notIn?: Enumerable<SiteMode>
    not?: NestedEnumSiteModeFilter | SiteMode
  }

  export type ColorschemeRelationFilter = {
    is?: ColorschemeWhereInput
    isNot?: ColorschemeWhereInput
  }

  export type ProblemListRelationFilter = {
    every?: ProblemWhereInput
    some?: ProblemWhereInput
    none?: ProblemWhereInput
  }

  export type SolutionListRelationFilter = {
    every?: SolutionWhereInput
    some?: SolutionWhereInput
    none?: SolutionWhereInput
  }

  export type RequirementListRelationFilter = {
    every?: RequirementWhereInput
    some?: RequirementWhereInput
    none?: RequirementWhereInput
  }

  export type ProblemVoteListRelationFilter = {
    every?: ProblemVoteWhereInput
    some?: ProblemVoteWhereInput
    none?: ProblemVoteWhereInput
  }

  export type SolutionVoteListRelationFilter = {
    every?: SolutionVoteWhereInput
    some?: SolutionVoteWhereInput
    none?: SolutionVoteWhereInput
  }

  export type RequirementVoteListRelationFilter = {
    every?: RequirementVoteWhereInput
    some?: RequirementVoteWhereInput
    none?: RequirementVoteWhereInput
  }

  export type ProblemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequirementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemVoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SolutionVoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequirementVoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    image?: SortOrder
    created?: SortOrder
    updatedAt?: SortOrder
    colorschemeId?: SortOrder
    siteMode?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    image?: SortOrder
    created?: SortOrder
    updatedAt?: SortOrder
    colorschemeId?: SortOrder
    siteMode?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    image?: SortOrder
    created?: SortOrder
    updatedAt?: SortOrder
    colorschemeId?: SortOrder
    siteMode?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumSiteModeWithAggregatesFilter = {
    equals?: SiteMode
    in?: Enumerable<SiteMode>
    notIn?: Enumerable<SiteMode>
    not?: NestedEnumSiteModeWithAggregatesFilter | SiteMode
    _count?: NestedIntFilter
    _min?: NestedEnumSiteModeFilter
    _max?: NestedEnumSiteModeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EnumLanguageNullableFilter = {
    equals?: Language | null
    in?: Enumerable<Language> | null
    notIn?: Enumerable<Language> | null
    not?: NestedEnumLanguageNullableFilter | Language | null
  }

  export type ProblemTagListRelationFilter = {
    every?: ProblemTagWhereInput
    some?: ProblemTagWhereInput
    none?: ProblemTagWhereInput
  }

  export type ProblemTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    desc?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    desc?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    desc?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumLanguageNullableWithAggregatesFilter = {
    equals?: Language | null
    in?: Enumerable<Language> | null
    notIn?: Enumerable<Language> | null
    not?: NestedEnumLanguageNullableWithAggregatesFilter | Language | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLanguageNullableFilter
    _max?: NestedEnumLanguageNullableFilter
  }

  export type RequirementTagListRelationFilter = {
    every?: RequirementTagWhereInput
    some?: RequirementTagWhereInput
    none?: RequirementTagWhereInput
  }

  export type RequirementTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequirementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
  }

  export type RequirementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
  }

  export type RequirementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RequirementRelationFilter = {
    is?: RequirementWhereInput
    isNot?: RequirementWhereInput
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type RequirementTagCountOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    tagId?: SortOrder
  }

  export type RequirementTagMaxOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    tagId?: SortOrder
  }

  export type RequirementTagMinOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    tagId?: SortOrder
  }

  export type ProblemRelationFilter = {
    is?: ProblemWhereInput
    isNot?: ProblemWhereInput
  }

  export type ProblemTagCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    tagId?: SortOrder
  }

  export type ProblemTagMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    tagId?: SortOrder
  }

  export type ProblemTagMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    tagId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumLanguageFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageFilter | Language
  }

  export type SolutionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    markedBest?: SortOrder
    language?: SortOrder
    content?: SortOrder
    publish?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    markedBest?: SortOrder
    language?: SortOrder
    content?: SortOrder
    publish?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolutionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    markedBest?: SortOrder
    language?: SortOrder
    content?: SortOrder
    publish?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumLanguageWithAggregatesFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageWithAggregatesFilter | Language
    _count?: NestedIntFilter
    _min?: NestedEnumLanguageFilter
    _max?: NestedEnumLanguageFilter
  }

  export type SolutionRelationFilter = {
    is?: SolutionWhereInput
    isNot?: SolutionWhereInput
  }

  export type EnumVoteValueFilter = {
    equals?: VoteValue
    in?: Enumerable<VoteValue>
    notIn?: Enumerable<VoteValue>
    not?: NestedEnumVoteValueFilter | VoteValue
  }

  export type EnumSolutionIdentifierNullableListFilter = {
    equals?: Enumerable<SolutionIdentifier> | null
    has?: SolutionIdentifier | null
    hasEvery?: Enumerable<SolutionIdentifier>
    hasSome?: Enumerable<SolutionIdentifier>
    isEmpty?: boolean
  }

  export type SolutionVoteCountOrderByAggregateInput = {
    id?: SortOrder
    solutionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolutionVoteMaxOrderByAggregateInput = {
    id?: SortOrder
    solutionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolutionVoteMinOrderByAggregateInput = {
    id?: SortOrder
    solutionId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumVoteValueWithAggregatesFilter = {
    equals?: VoteValue
    in?: Enumerable<VoteValue>
    notIn?: Enumerable<VoteValue>
    not?: NestedEnumVoteValueWithAggregatesFilter | VoteValue
    _count?: NestedIntFilter
    _min?: NestedEnumVoteValueFilter
    _max?: NestedEnumVoteValueFilter
  }

  export type ProblemVoteCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemVoteMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemVoteMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequirementVoteCountOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    identifiers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequirementVoteMaxOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequirementVoteMinOrderByAggregateInput = {
    id?: SortOrder
    requirementId?: SortOrder
    userId?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColorschemeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColorschemeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColorschemeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColorschemeCreateNestedOneWithoutUsersInput = {
    create?: XOR<ColorschemeCreateWithoutUsersInput, ColorschemeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ColorschemeCreateOrConnectWithoutUsersInput
    connect?: ColorschemeWhereUniqueInput
  }

  export type ProblemCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemCreateWithoutUserInput>, Enumerable<ProblemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemCreateOrConnectWithoutUserInput>
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: Enumerable<ProblemWhereUniqueInput>
  }

  export type SolutionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutUserInput>, Enumerable<SolutionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutUserInput>
    createMany?: SolutionCreateManyUserInputEnvelope
    connect?: Enumerable<SolutionWhereUniqueInput>
  }

  export type RequirementCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementCreateWithoutUserInput>, Enumerable<RequirementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementCreateOrConnectWithoutUserInput>
    createMany?: RequirementCreateManyUserInputEnvelope
    connect?: Enumerable<RequirementWhereUniqueInput>
  }

  export type ProblemVoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutUserInput>, Enumerable<ProblemVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutUserInput>
    createMany?: ProblemVoteCreateManyUserInputEnvelope
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
  }

  export type SolutionVoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutUserInput>, Enumerable<SolutionVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutUserInput>
    createMany?: SolutionVoteCreateManyUserInputEnvelope
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
  }

  export type RequirementVoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutUserInput>, Enumerable<RequirementVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutUserInput>
    createMany?: RequirementVoteCreateManyUserInputEnvelope
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
  }

  export type ProblemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemCreateWithoutUserInput>, Enumerable<ProblemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemCreateOrConnectWithoutUserInput>
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: Enumerable<ProblemWhereUniqueInput>
  }

  export type SolutionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutUserInput>, Enumerable<SolutionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutUserInput>
    createMany?: SolutionCreateManyUserInputEnvelope
    connect?: Enumerable<SolutionWhereUniqueInput>
  }

  export type RequirementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementCreateWithoutUserInput>, Enumerable<RequirementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementCreateOrConnectWithoutUserInput>
    createMany?: RequirementCreateManyUserInputEnvelope
    connect?: Enumerable<RequirementWhereUniqueInput>
  }

  export type ProblemVoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutUserInput>, Enumerable<ProblemVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutUserInput>
    createMany?: ProblemVoteCreateManyUserInputEnvelope
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
  }

  export type SolutionVoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutUserInput>, Enumerable<SolutionVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutUserInput>
    createMany?: SolutionVoteCreateManyUserInputEnvelope
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
  }

  export type RequirementVoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutUserInput>, Enumerable<RequirementVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutUserInput>
    createMany?: RequirementVoteCreateManyUserInputEnvelope
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumSiteModeFieldUpdateOperationsInput = {
    set?: SiteMode
  }

  export type ColorschemeUpdateOneRequiredWithoutUsersInput = {
    create?: XOR<ColorschemeCreateWithoutUsersInput, ColorschemeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ColorschemeCreateOrConnectWithoutUsersInput
    upsert?: ColorschemeUpsertWithoutUsersInput
    connect?: ColorschemeWhereUniqueInput
    update?: XOR<ColorschemeUpdateWithoutUsersInput, ColorschemeUncheckedUpdateWithoutUsersInput>
  }

  export type ProblemUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemCreateWithoutUserInput>, Enumerable<ProblemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProblemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: Enumerable<ProblemWhereUniqueInput>
    disconnect?: Enumerable<ProblemWhereUniqueInput>
    delete?: Enumerable<ProblemWhereUniqueInput>
    connect?: Enumerable<ProblemWhereUniqueInput>
    update?: Enumerable<ProblemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProblemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProblemScalarWhereInput>
  }

  export type SolutionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutUserInput>, Enumerable<SolutionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SolutionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SolutionCreateManyUserInputEnvelope
    set?: Enumerable<SolutionWhereUniqueInput>
    disconnect?: Enumerable<SolutionWhereUniqueInput>
    delete?: Enumerable<SolutionWhereUniqueInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    update?: Enumerable<SolutionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SolutionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SolutionScalarWhereInput>
  }

  export type RequirementUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementCreateWithoutUserInput>, Enumerable<RequirementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequirementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequirementCreateManyUserInputEnvelope
    set?: Enumerable<RequirementWhereUniqueInput>
    disconnect?: Enumerable<RequirementWhereUniqueInput>
    delete?: Enumerable<RequirementWhereUniqueInput>
    connect?: Enumerable<RequirementWhereUniqueInput>
    update?: Enumerable<RequirementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequirementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequirementScalarWhereInput>
  }

  export type ProblemVoteUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutUserInput>, Enumerable<ProblemVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProblemVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProblemVoteCreateManyUserInputEnvelope
    set?: Enumerable<ProblemVoteWhereUniqueInput>
    disconnect?: Enumerable<ProblemVoteWhereUniqueInput>
    delete?: Enumerable<ProblemVoteWhereUniqueInput>
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
    update?: Enumerable<ProblemVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProblemVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProblemVoteScalarWhereInput>
  }

  export type SolutionVoteUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutUserInput>, Enumerable<SolutionVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SolutionVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SolutionVoteCreateManyUserInputEnvelope
    set?: Enumerable<SolutionVoteWhereUniqueInput>
    disconnect?: Enumerable<SolutionVoteWhereUniqueInput>
    delete?: Enumerable<SolutionVoteWhereUniqueInput>
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
    update?: Enumerable<SolutionVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SolutionVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SolutionVoteScalarWhereInput>
  }

  export type RequirementVoteUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutUserInput>, Enumerable<RequirementVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequirementVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequirementVoteCreateManyUserInputEnvelope
    set?: Enumerable<RequirementVoteWhereUniqueInput>
    disconnect?: Enumerable<RequirementVoteWhereUniqueInput>
    delete?: Enumerable<RequirementVoteWhereUniqueInput>
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
    update?: Enumerable<RequirementVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequirementVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequirementVoteScalarWhereInput>
  }

  export type ProblemUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemCreateWithoutUserInput>, Enumerable<ProblemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProblemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: Enumerable<ProblemWhereUniqueInput>
    disconnect?: Enumerable<ProblemWhereUniqueInput>
    delete?: Enumerable<ProblemWhereUniqueInput>
    connect?: Enumerable<ProblemWhereUniqueInput>
    update?: Enumerable<ProblemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProblemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProblemScalarWhereInput>
  }

  export type SolutionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutUserInput>, Enumerable<SolutionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SolutionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SolutionCreateManyUserInputEnvelope
    set?: Enumerable<SolutionWhereUniqueInput>
    disconnect?: Enumerable<SolutionWhereUniqueInput>
    delete?: Enumerable<SolutionWhereUniqueInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    update?: Enumerable<SolutionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SolutionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SolutionScalarWhereInput>
  }

  export type RequirementUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementCreateWithoutUserInput>, Enumerable<RequirementUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequirementUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequirementCreateManyUserInputEnvelope
    set?: Enumerable<RequirementWhereUniqueInput>
    disconnect?: Enumerable<RequirementWhereUniqueInput>
    delete?: Enumerable<RequirementWhereUniqueInput>
    connect?: Enumerable<RequirementWhereUniqueInput>
    update?: Enumerable<RequirementUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequirementUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequirementScalarWhereInput>
  }

  export type ProblemVoteUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutUserInput>, Enumerable<ProblemVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProblemVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProblemVoteCreateManyUserInputEnvelope
    set?: Enumerable<ProblemVoteWhereUniqueInput>
    disconnect?: Enumerable<ProblemVoteWhereUniqueInput>
    delete?: Enumerable<ProblemVoteWhereUniqueInput>
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
    update?: Enumerable<ProblemVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProblemVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProblemVoteScalarWhereInput>
  }

  export type SolutionVoteUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutUserInput>, Enumerable<SolutionVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SolutionVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SolutionVoteCreateManyUserInputEnvelope
    set?: Enumerable<SolutionVoteWhereUniqueInput>
    disconnect?: Enumerable<SolutionVoteWhereUniqueInput>
    delete?: Enumerable<SolutionVoteWhereUniqueInput>
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
    update?: Enumerable<SolutionVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SolutionVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SolutionVoteScalarWhereInput>
  }

  export type RequirementVoteUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutUserInput>, Enumerable<RequirementVoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RequirementVoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RequirementVoteCreateManyUserInputEnvelope
    set?: Enumerable<RequirementVoteWhereUniqueInput>
    disconnect?: Enumerable<RequirementVoteWhereUniqueInput>
    delete?: Enumerable<RequirementVoteWhereUniqueInput>
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
    update?: Enumerable<RequirementVoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RequirementVoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RequirementVoteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProblemsInput = {
    create?: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemsInput
    connect?: UserWhereUniqueInput
  }

  export type SolutionCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutProblemInput>, Enumerable<SolutionUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutProblemInput>
    createMany?: SolutionCreateManyProblemInputEnvelope
    connect?: Enumerable<SolutionWhereUniqueInput>
  }

  export type ProblemTagCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutProblemInput>, Enumerable<ProblemTagUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutProblemInput>
    createMany?: ProblemTagCreateManyProblemInputEnvelope
    connect?: Enumerable<ProblemTagWhereUniqueInput>
  }

  export type ProblemVoteCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutProblemInput>, Enumerable<ProblemVoteUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutProblemInput>
    createMany?: ProblemVoteCreateManyProblemInputEnvelope
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
  }

  export type SolutionUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutProblemInput>, Enumerable<SolutionUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutProblemInput>
    createMany?: SolutionCreateManyProblemInputEnvelope
    connect?: Enumerable<SolutionWhereUniqueInput>
  }

  export type ProblemTagUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutProblemInput>, Enumerable<ProblemTagUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutProblemInput>
    createMany?: ProblemTagCreateManyProblemInputEnvelope
    connect?: Enumerable<ProblemTagWhereUniqueInput>
  }

  export type ProblemVoteUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutProblemInput>, Enumerable<ProblemVoteUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutProblemInput>
    createMany?: ProblemVoteCreateManyProblemInputEnvelope
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
  }

  export type NullableEnumLanguageFieldUpdateOperationsInput = {
    set?: Language | null
  }

  export type UserUpdateOneRequiredWithoutProblemsInput = {
    create?: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemsInput
    upsert?: UserUpsertWithoutProblemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProblemsInput, UserUncheckedUpdateWithoutProblemsInput>
  }

  export type SolutionUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutProblemInput>, Enumerable<SolutionUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<SolutionUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: SolutionCreateManyProblemInputEnvelope
    set?: Enumerable<SolutionWhereUniqueInput>
    disconnect?: Enumerable<SolutionWhereUniqueInput>
    delete?: Enumerable<SolutionWhereUniqueInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    update?: Enumerable<SolutionUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<SolutionUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<SolutionScalarWhereInput>
  }

  export type ProblemTagUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutProblemInput>, Enumerable<ProblemTagUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<ProblemTagUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: ProblemTagCreateManyProblemInputEnvelope
    set?: Enumerable<ProblemTagWhereUniqueInput>
    disconnect?: Enumerable<ProblemTagWhereUniqueInput>
    delete?: Enumerable<ProblemTagWhereUniqueInput>
    connect?: Enumerable<ProblemTagWhereUniqueInput>
    update?: Enumerable<ProblemTagUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<ProblemTagUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<ProblemTagScalarWhereInput>
  }

  export type ProblemVoteUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutProblemInput>, Enumerable<ProblemVoteUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<ProblemVoteUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: ProblemVoteCreateManyProblemInputEnvelope
    set?: Enumerable<ProblemVoteWhereUniqueInput>
    disconnect?: Enumerable<ProblemVoteWhereUniqueInput>
    delete?: Enumerable<ProblemVoteWhereUniqueInput>
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
    update?: Enumerable<ProblemVoteUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<ProblemVoteUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<ProblemVoteScalarWhereInput>
  }

  export type SolutionUncheckedUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<SolutionCreateWithoutProblemInput>, Enumerable<SolutionUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<SolutionCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<SolutionUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: SolutionCreateManyProblemInputEnvelope
    set?: Enumerable<SolutionWhereUniqueInput>
    disconnect?: Enumerable<SolutionWhereUniqueInput>
    delete?: Enumerable<SolutionWhereUniqueInput>
    connect?: Enumerable<SolutionWhereUniqueInput>
    update?: Enumerable<SolutionUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<SolutionUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<SolutionScalarWhereInput>
  }

  export type ProblemTagUncheckedUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutProblemInput>, Enumerable<ProblemTagUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<ProblemTagUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: ProblemTagCreateManyProblemInputEnvelope
    set?: Enumerable<ProblemTagWhereUniqueInput>
    disconnect?: Enumerable<ProblemTagWhereUniqueInput>
    delete?: Enumerable<ProblemTagWhereUniqueInput>
    connect?: Enumerable<ProblemTagWhereUniqueInput>
    update?: Enumerable<ProblemTagUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<ProblemTagUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<ProblemTagScalarWhereInput>
  }

  export type ProblemVoteUncheckedUpdateManyWithoutProblemInput = {
    create?: XOR<Enumerable<ProblemVoteCreateWithoutProblemInput>, Enumerable<ProblemVoteUncheckedCreateWithoutProblemInput>>
    connectOrCreate?: Enumerable<ProblemVoteCreateOrConnectWithoutProblemInput>
    upsert?: Enumerable<ProblemVoteUpsertWithWhereUniqueWithoutProblemInput>
    createMany?: ProblemVoteCreateManyProblemInputEnvelope
    set?: Enumerable<ProblemVoteWhereUniqueInput>
    disconnect?: Enumerable<ProblemVoteWhereUniqueInput>
    delete?: Enumerable<ProblemVoteWhereUniqueInput>
    connect?: Enumerable<ProblemVoteWhereUniqueInput>
    update?: Enumerable<ProblemVoteUpdateWithWhereUniqueWithoutProblemInput>
    updateMany?: Enumerable<ProblemVoteUpdateManyWithWhereWithoutProblemInput>
    deleteMany?: Enumerable<ProblemVoteScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutRequirementsInput = {
    create?: XOR<UserCreateWithoutRequirementsInput, UserUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequirementsInput
    connect?: UserWhereUniqueInput
  }

  export type RequirementTagCreateNestedManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutRequirementInput>, Enumerable<RequirementTagUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutRequirementInput>
    createMany?: RequirementTagCreateManyRequirementInputEnvelope
    connect?: Enumerable<RequirementTagWhereUniqueInput>
  }

  export type RequirementVoteCreateNestedManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutRequirementInput>, Enumerable<RequirementVoteUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutRequirementInput>
    createMany?: RequirementVoteCreateManyRequirementInputEnvelope
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
  }

  export type RequirementTagUncheckedCreateNestedManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutRequirementInput>, Enumerable<RequirementTagUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutRequirementInput>
    createMany?: RequirementTagCreateManyRequirementInputEnvelope
    connect?: Enumerable<RequirementTagWhereUniqueInput>
  }

  export type RequirementVoteUncheckedCreateNestedManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutRequirementInput>, Enumerable<RequirementVoteUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutRequirementInput>
    createMany?: RequirementVoteCreateManyRequirementInputEnvelope
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutRequirementsInput = {
    create?: XOR<UserCreateWithoutRequirementsInput, UserUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequirementsInput
    upsert?: UserUpsertWithoutRequirementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequirementsInput, UserUncheckedUpdateWithoutRequirementsInput>
  }

  export type RequirementTagUpdateManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutRequirementInput>, Enumerable<RequirementTagUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutRequirementInput>
    upsert?: Enumerable<RequirementTagUpsertWithWhereUniqueWithoutRequirementInput>
    createMany?: RequirementTagCreateManyRequirementInputEnvelope
    set?: Enumerable<RequirementTagWhereUniqueInput>
    disconnect?: Enumerable<RequirementTagWhereUniqueInput>
    delete?: Enumerable<RequirementTagWhereUniqueInput>
    connect?: Enumerable<RequirementTagWhereUniqueInput>
    update?: Enumerable<RequirementTagUpdateWithWhereUniqueWithoutRequirementInput>
    updateMany?: Enumerable<RequirementTagUpdateManyWithWhereWithoutRequirementInput>
    deleteMany?: Enumerable<RequirementTagScalarWhereInput>
  }

  export type RequirementVoteUpdateManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutRequirementInput>, Enumerable<RequirementVoteUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutRequirementInput>
    upsert?: Enumerable<RequirementVoteUpsertWithWhereUniqueWithoutRequirementInput>
    createMany?: RequirementVoteCreateManyRequirementInputEnvelope
    set?: Enumerable<RequirementVoteWhereUniqueInput>
    disconnect?: Enumerable<RequirementVoteWhereUniqueInput>
    delete?: Enumerable<RequirementVoteWhereUniqueInput>
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
    update?: Enumerable<RequirementVoteUpdateWithWhereUniqueWithoutRequirementInput>
    updateMany?: Enumerable<RequirementVoteUpdateManyWithWhereWithoutRequirementInput>
    deleteMany?: Enumerable<RequirementVoteScalarWhereInput>
  }

  export type RequirementTagUncheckedUpdateManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutRequirementInput>, Enumerable<RequirementTagUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutRequirementInput>
    upsert?: Enumerable<RequirementTagUpsertWithWhereUniqueWithoutRequirementInput>
    createMany?: RequirementTagCreateManyRequirementInputEnvelope
    set?: Enumerable<RequirementTagWhereUniqueInput>
    disconnect?: Enumerable<RequirementTagWhereUniqueInput>
    delete?: Enumerable<RequirementTagWhereUniqueInput>
    connect?: Enumerable<RequirementTagWhereUniqueInput>
    update?: Enumerable<RequirementTagUpdateWithWhereUniqueWithoutRequirementInput>
    updateMany?: Enumerable<RequirementTagUpdateManyWithWhereWithoutRequirementInput>
    deleteMany?: Enumerable<RequirementTagScalarWhereInput>
  }

  export type RequirementVoteUncheckedUpdateManyWithoutRequirementInput = {
    create?: XOR<Enumerable<RequirementVoteCreateWithoutRequirementInput>, Enumerable<RequirementVoteUncheckedCreateWithoutRequirementInput>>
    connectOrCreate?: Enumerable<RequirementVoteCreateOrConnectWithoutRequirementInput>
    upsert?: Enumerable<RequirementVoteUpsertWithWhereUniqueWithoutRequirementInput>
    createMany?: RequirementVoteCreateManyRequirementInputEnvelope
    set?: Enumerable<RequirementVoteWhereUniqueInput>
    disconnect?: Enumerable<RequirementVoteWhereUniqueInput>
    delete?: Enumerable<RequirementVoteWhereUniqueInput>
    connect?: Enumerable<RequirementVoteWhereUniqueInput>
    update?: Enumerable<RequirementVoteUpdateWithWhereUniqueWithoutRequirementInput>
    updateMany?: Enumerable<RequirementVoteUpdateManyWithWhereWithoutRequirementInput>
    deleteMany?: Enumerable<RequirementVoteScalarWhereInput>
  }

  export type RequirementTagCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutTagInput>, Enumerable<RequirementTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutTagInput>
    createMany?: RequirementTagCreateManyTagInputEnvelope
    connect?: Enumerable<RequirementTagWhereUniqueInput>
  }

  export type ProblemTagCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutTagInput>, Enumerable<ProblemTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutTagInput>
    createMany?: ProblemTagCreateManyTagInputEnvelope
    connect?: Enumerable<ProblemTagWhereUniqueInput>
  }

  export type RequirementTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutTagInput>, Enumerable<RequirementTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutTagInput>
    createMany?: RequirementTagCreateManyTagInputEnvelope
    connect?: Enumerable<RequirementTagWhereUniqueInput>
  }

  export type ProblemTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutTagInput>, Enumerable<ProblemTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutTagInput>
    createMany?: ProblemTagCreateManyTagInputEnvelope
    connect?: Enumerable<ProblemTagWhereUniqueInput>
  }

  export type RequirementTagUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutTagInput>, Enumerable<RequirementTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<RequirementTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: RequirementTagCreateManyTagInputEnvelope
    set?: Enumerable<RequirementTagWhereUniqueInput>
    disconnect?: Enumerable<RequirementTagWhereUniqueInput>
    delete?: Enumerable<RequirementTagWhereUniqueInput>
    connect?: Enumerable<RequirementTagWhereUniqueInput>
    update?: Enumerable<RequirementTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<RequirementTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<RequirementTagScalarWhereInput>
  }

  export type ProblemTagUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutTagInput>, Enumerable<ProblemTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<ProblemTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: ProblemTagCreateManyTagInputEnvelope
    set?: Enumerable<ProblemTagWhereUniqueInput>
    disconnect?: Enumerable<ProblemTagWhereUniqueInput>
    delete?: Enumerable<ProblemTagWhereUniqueInput>
    connect?: Enumerable<ProblemTagWhereUniqueInput>
    update?: Enumerable<ProblemTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<ProblemTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<ProblemTagScalarWhereInput>
  }

  export type RequirementTagUncheckedUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<RequirementTagCreateWithoutTagInput>, Enumerable<RequirementTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<RequirementTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<RequirementTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: RequirementTagCreateManyTagInputEnvelope
    set?: Enumerable<RequirementTagWhereUniqueInput>
    disconnect?: Enumerable<RequirementTagWhereUniqueInput>
    delete?: Enumerable<RequirementTagWhereUniqueInput>
    connect?: Enumerable<RequirementTagWhereUniqueInput>
    update?: Enumerable<RequirementTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<RequirementTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<RequirementTagScalarWhereInput>
  }

  export type ProblemTagUncheckedUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<ProblemTagCreateWithoutTagInput>, Enumerable<ProblemTagUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<ProblemTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<ProblemTagUpsertWithWhereUniqueWithoutTagInput>
    createMany?: ProblemTagCreateManyTagInputEnvelope
    set?: Enumerable<ProblemTagWhereUniqueInput>
    disconnect?: Enumerable<ProblemTagWhereUniqueInput>
    delete?: Enumerable<ProblemTagWhereUniqueInput>
    connect?: Enumerable<ProblemTagWhereUniqueInput>
    update?: Enumerable<ProblemTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<ProblemTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<ProblemTagScalarWhereInput>
  }

  export type RequirementCreateNestedOneWithoutTagsInput = {
    create?: XOR<RequirementCreateWithoutTagsInput, RequirementUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RequirementCreateOrConnectWithoutTagsInput
    connect?: RequirementWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutRequirementsInput = {
    create?: XOR<TagCreateWithoutRequirementsInput, TagUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: TagCreateOrConnectWithoutRequirementsInput
    connect?: TagWhereUniqueInput
  }

  export type RequirementUpdateOneRequiredWithoutTagsInput = {
    create?: XOR<RequirementCreateWithoutTagsInput, RequirementUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RequirementCreateOrConnectWithoutTagsInput
    upsert?: RequirementUpsertWithoutTagsInput
    connect?: RequirementWhereUniqueInput
    update?: XOR<RequirementUpdateWithoutTagsInput, RequirementUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutRequirementsInput = {
    create?: XOR<TagCreateWithoutRequirementsInput, TagUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: TagCreateOrConnectWithoutRequirementsInput
    upsert?: TagUpsertWithoutRequirementsInput
    connect?: TagWhereUniqueInput
    update?: XOR<TagUpdateWithoutRequirementsInput, TagUncheckedUpdateWithoutRequirementsInput>
  }

  export type ProblemCreateNestedOneWithoutTagsInput = {
    create?: XOR<ProblemCreateWithoutTagsInput, ProblemUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTagsInput
    connect?: ProblemWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutProblemsInput = {
    create?: XOR<TagCreateWithoutProblemsInput, TagUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProblemsInput
    connect?: TagWhereUniqueInput
  }

  export type ProblemUpdateOneRequiredWithoutTagsInput = {
    create?: XOR<ProblemCreateWithoutTagsInput, ProblemUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTagsInput
    upsert?: ProblemUpsertWithoutTagsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<ProblemUpdateWithoutTagsInput, ProblemUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutProblemsInput = {
    create?: XOR<TagCreateWithoutProblemsInput, TagUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProblemsInput
    upsert?: TagUpsertWithoutProblemsInput
    connect?: TagWhereUniqueInput
    update?: XOR<TagUpdateWithoutProblemsInput, TagUncheckedUpdateWithoutProblemsInput>
  }

  export type UserCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolutionsInput
    connect?: ProblemWhereUniqueInput
  }

  export type SolutionVoteCreateNestedManyWithoutSolutionInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutSolutionInput>, Enumerable<SolutionVoteUncheckedCreateWithoutSolutionInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutSolutionInput>
    createMany?: SolutionVoteCreateManySolutionInputEnvelope
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
  }

  export type SolutionVoteUncheckedCreateNestedManyWithoutSolutionInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutSolutionInput>, Enumerable<SolutionVoteUncheckedCreateWithoutSolutionInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutSolutionInput>
    createMany?: SolutionVoteCreateManySolutionInputEnvelope
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: Language
  }

  export type UserUpdateOneRequiredWithoutSolutionsInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    upsert?: UserUpsertWithoutSolutionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
  }

  export type ProblemUpdateOneRequiredWithoutSolutionsInput = {
    create?: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolutionsInput
    upsert?: ProblemUpsertWithoutSolutionsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<ProblemUpdateWithoutSolutionsInput, ProblemUncheckedUpdateWithoutSolutionsInput>
  }

  export type SolutionVoteUpdateManyWithoutSolutionInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutSolutionInput>, Enumerable<SolutionVoteUncheckedCreateWithoutSolutionInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutSolutionInput>
    upsert?: Enumerable<SolutionVoteUpsertWithWhereUniqueWithoutSolutionInput>
    createMany?: SolutionVoteCreateManySolutionInputEnvelope
    set?: Enumerable<SolutionVoteWhereUniqueInput>
    disconnect?: Enumerable<SolutionVoteWhereUniqueInput>
    delete?: Enumerable<SolutionVoteWhereUniqueInput>
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
    update?: Enumerable<SolutionVoteUpdateWithWhereUniqueWithoutSolutionInput>
    updateMany?: Enumerable<SolutionVoteUpdateManyWithWhereWithoutSolutionInput>
    deleteMany?: Enumerable<SolutionVoteScalarWhereInput>
  }

  export type SolutionVoteUncheckedUpdateManyWithoutSolutionInput = {
    create?: XOR<Enumerable<SolutionVoteCreateWithoutSolutionInput>, Enumerable<SolutionVoteUncheckedCreateWithoutSolutionInput>>
    connectOrCreate?: Enumerable<SolutionVoteCreateOrConnectWithoutSolutionInput>
    upsert?: Enumerable<SolutionVoteUpsertWithWhereUniqueWithoutSolutionInput>
    createMany?: SolutionVoteCreateManySolutionInputEnvelope
    set?: Enumerable<SolutionVoteWhereUniqueInput>
    disconnect?: Enumerable<SolutionVoteWhereUniqueInput>
    delete?: Enumerable<SolutionVoteWhereUniqueInput>
    connect?: Enumerable<SolutionVoteWhereUniqueInput>
    update?: Enumerable<SolutionVoteUpdateWithWhereUniqueWithoutSolutionInput>
    updateMany?: Enumerable<SolutionVoteUpdateManyWithWhereWithoutSolutionInput>
    deleteMany?: Enumerable<SolutionVoteScalarWhereInput>
  }

  export type SolutionVoteCreateidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type SolutionCreateNestedOneWithoutVotesInput = {
    create?: XOR<SolutionCreateWithoutVotesInput, SolutionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: SolutionCreateOrConnectWithoutVotesInput
    connect?: SolutionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSolutionVotesInput = {
    create?: XOR<UserCreateWithoutSolutionVotesInput, UserUncheckedCreateWithoutSolutionVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionVotesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumVoteValueFieldUpdateOperationsInput = {
    set?: VoteValue
  }

  export type SolutionVoteUpdateidentifiersInput = {
    set?: Enumerable<SolutionIdentifier>
    push?: Enumerable<SolutionIdentifier>
  }

  export type SolutionUpdateOneRequiredWithoutVotesInput = {
    create?: XOR<SolutionCreateWithoutVotesInput, SolutionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: SolutionCreateOrConnectWithoutVotesInput
    upsert?: SolutionUpsertWithoutVotesInput
    connect?: SolutionWhereUniqueInput
    update?: XOR<SolutionUpdateWithoutVotesInput, SolutionUncheckedUpdateWithoutVotesInput>
  }

  export type UserUpdateOneRequiredWithoutSolutionVotesInput = {
    create?: XOR<UserCreateWithoutSolutionVotesInput, UserUncheckedCreateWithoutSolutionVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionVotesInput
    upsert?: UserUpsertWithoutSolutionVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSolutionVotesInput, UserUncheckedUpdateWithoutSolutionVotesInput>
  }

  export type SolutionVoteCreateManyidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteCreateidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type ProblemCreateNestedOneWithoutVotesInput = {
    create?: XOR<ProblemCreateWithoutVotesInput, ProblemUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutVotesInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProblemVotesInput = {
    create?: XOR<UserCreateWithoutProblemVotesInput, UserUncheckedCreateWithoutProblemVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemVotesInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemVoteUpdateidentifiersInput = {
    set?: Enumerable<SolutionIdentifier>
    push?: Enumerable<SolutionIdentifier>
  }

  export type ProblemUpdateOneRequiredWithoutVotesInput = {
    create?: XOR<ProblemCreateWithoutVotesInput, ProblemUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutVotesInput
    upsert?: ProblemUpsertWithoutVotesInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<ProblemUpdateWithoutVotesInput, ProblemUncheckedUpdateWithoutVotesInput>
  }

  export type UserUpdateOneRequiredWithoutProblemVotesInput = {
    create?: XOR<UserCreateWithoutProblemVotesInput, UserUncheckedCreateWithoutProblemVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemVotesInput
    upsert?: UserUpsertWithoutProblemVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProblemVotesInput, UserUncheckedUpdateWithoutProblemVotesInput>
  }

  export type ProblemVoteCreateManyidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type RequirementCreateNestedOneWithoutVotesInput = {
    create?: XOR<RequirementCreateWithoutVotesInput, RequirementUncheckedCreateWithoutVotesInput>
    connectOrCreate?: RequirementCreateOrConnectWithoutVotesInput
    connect?: RequirementWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequirementVotesInput = {
    create?: XOR<UserCreateWithoutRequirementVotesInput, UserUncheckedCreateWithoutRequirementVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequirementVotesInput
    connect?: UserWhereUniqueInput
  }

  export type RequirementVoteUpdateidentifiersInput = {
    set?: Enumerable<SolutionIdentifier>
    push?: Enumerable<SolutionIdentifier>
  }

  export type RequirementUpdateOneRequiredWithoutVotesInput = {
    create?: XOR<RequirementCreateWithoutVotesInput, RequirementUncheckedCreateWithoutVotesInput>
    connectOrCreate?: RequirementCreateOrConnectWithoutVotesInput
    upsert?: RequirementUpsertWithoutVotesInput
    connect?: RequirementWhereUniqueInput
    update?: XOR<RequirementUpdateWithoutVotesInput, RequirementUncheckedUpdateWithoutVotesInput>
  }

  export type UserUpdateOneRequiredWithoutRequirementVotesInput = {
    create?: XOR<UserCreateWithoutRequirementVotesInput, UserUncheckedCreateWithoutRequirementVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequirementVotesInput
    upsert?: UserUpsertWithoutRequirementVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequirementVotesInput, UserUncheckedUpdateWithoutRequirementVotesInput>
  }

  export type RequirementVoteCreateManyidentifiersInput = {
    set: Enumerable<SolutionIdentifier>
  }

  export type UserCreateNestedManyWithoutColorschemeInput = {
    create?: XOR<Enumerable<UserCreateWithoutColorschemeInput>, Enumerable<UserUncheckedCreateWithoutColorschemeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutColorschemeInput>
    createMany?: UserCreateManyColorschemeInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutColorschemeInput = {
    create?: XOR<Enumerable<UserCreateWithoutColorschemeInput>, Enumerable<UserUncheckedCreateWithoutColorschemeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutColorschemeInput>
    createMany?: UserCreateManyColorschemeInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutColorschemeInput = {
    create?: XOR<Enumerable<UserCreateWithoutColorschemeInput>, Enumerable<UserUncheckedCreateWithoutColorschemeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutColorschemeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutColorschemeInput>
    createMany?: UserCreateManyColorschemeInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutColorschemeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutColorschemeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutColorschemeInput = {
    create?: XOR<Enumerable<UserCreateWithoutColorschemeInput>, Enumerable<UserUncheckedCreateWithoutColorschemeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutColorschemeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutColorschemeInput>
    createMany?: UserCreateManyColorschemeInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutColorschemeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutColorschemeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumSiteModeFilter = {
    equals?: SiteMode
    in?: Enumerable<SiteMode>
    notIn?: Enumerable<SiteMode>
    not?: NestedEnumSiteModeFilter | SiteMode
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumSiteModeWithAggregatesFilter = {
    equals?: SiteMode
    in?: Enumerable<SiteMode>
    notIn?: Enumerable<SiteMode>
    not?: NestedEnumSiteModeWithAggregatesFilter | SiteMode
    _count?: NestedIntFilter
    _min?: NestedEnumSiteModeFilter
    _max?: NestedEnumSiteModeFilter
  }

  export type NestedEnumLanguageNullableFilter = {
    equals?: Language | null
    in?: Enumerable<Language> | null
    notIn?: Enumerable<Language> | null
    not?: NestedEnumLanguageNullableFilter | Language | null
  }

  export type NestedEnumLanguageNullableWithAggregatesFilter = {
    equals?: Language | null
    in?: Enumerable<Language> | null
    notIn?: Enumerable<Language> | null
    not?: NestedEnumLanguageNullableWithAggregatesFilter | Language | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLanguageNullableFilter
    _max?: NestedEnumLanguageNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumLanguageFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageFilter | Language
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumLanguageWithAggregatesFilter = {
    equals?: Language
    in?: Enumerable<Language>
    notIn?: Enumerable<Language>
    not?: NestedEnumLanguageWithAggregatesFilter | Language
    _count?: NestedIntFilter
    _min?: NestedEnumLanguageFilter
    _max?: NestedEnumLanguageFilter
  }

  export type NestedEnumVoteValueFilter = {
    equals?: VoteValue
    in?: Enumerable<VoteValue>
    notIn?: Enumerable<VoteValue>
    not?: NestedEnumVoteValueFilter | VoteValue
  }

  export type NestedEnumVoteValueWithAggregatesFilter = {
    equals?: VoteValue
    in?: Enumerable<VoteValue>
    notIn?: Enumerable<VoteValue>
    not?: NestedEnumVoteValueWithAggregatesFilter | VoteValue
    _count?: NestedIntFilter
    _min?: NestedEnumVoteValueFilter
    _max?: NestedEnumVoteValueFilter
  }

  export type ColorschemeCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorschemeUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorschemeCreateOrConnectWithoutUsersInput = {
    where: ColorschemeWhereUniqueInput
    create: XOR<ColorschemeCreateWithoutUsersInput, ColorschemeUncheckedCreateWithoutUsersInput>
  }

  export type ProblemCreateWithoutUserInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solutions?: SolutionCreateNestedManyWithoutProblemInput
    tags?: ProblemTagCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutUserInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solutions?: SolutionUncheckedCreateNestedManyWithoutProblemInput
    tags?: ProblemTagUncheckedCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutUserInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemCreateManyUserInputEnvelope = {
    data: Enumerable<ProblemCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SolutionCreateWithoutUserInput = {
    id?: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    votes?: SolutionVoteCreateNestedManyWithoutSolutionInput
  }

  export type SolutionUncheckedCreateWithoutUserInput = {
    id?: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: SolutionVoteUncheckedCreateNestedManyWithoutSolutionInput
  }

  export type SolutionCreateOrConnectWithoutUserInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput>
  }

  export type SolutionCreateManyUserInputEnvelope = {
    data: Enumerable<SolutionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RequirementCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    tags?: RequirementTagCreateNestedManyWithoutRequirementInput
    votes?: RequirementVoteCreateNestedManyWithoutRequirementInput
  }

  export type RequirementUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    tags?: RequirementTagUncheckedCreateNestedManyWithoutRequirementInput
    votes?: RequirementVoteUncheckedCreateNestedManyWithoutRequirementInput
  }

  export type RequirementCreateOrConnectWithoutUserInput = {
    where: RequirementWhereUniqueInput
    create: XOR<RequirementCreateWithoutUserInput, RequirementUncheckedCreateWithoutUserInput>
  }

  export type RequirementCreateManyUserInputEnvelope = {
    data: Enumerable<RequirementCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProblemVoteCreateWithoutUserInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    problem: ProblemCreateNestedOneWithoutVotesInput
  }

  export type ProblemVoteUncheckedCreateWithoutUserInput = {
    id?: string
    problemId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteCreateOrConnectWithoutUserInput = {
    where: ProblemVoteWhereUniqueInput
    create: XOR<ProblemVoteCreateWithoutUserInput, ProblemVoteUncheckedCreateWithoutUserInput>
  }

  export type ProblemVoteCreateManyUserInputEnvelope = {
    data: Enumerable<ProblemVoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SolutionVoteCreateWithoutUserInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    solution: SolutionCreateNestedOneWithoutVotesInput
  }

  export type SolutionVoteUncheckedCreateWithoutUserInput = {
    id?: string
    solutionId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteCreateOrConnectWithoutUserInput = {
    where: SolutionVoteWhereUniqueInput
    create: XOR<SolutionVoteCreateWithoutUserInput, SolutionVoteUncheckedCreateWithoutUserInput>
  }

  export type SolutionVoteCreateManyUserInputEnvelope = {
    data: Enumerable<SolutionVoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RequirementVoteCreateWithoutUserInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    requirement: RequirementCreateNestedOneWithoutVotesInput
  }

  export type RequirementVoteUncheckedCreateWithoutUserInput = {
    id?: string
    requirementId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateOrConnectWithoutUserInput = {
    where: RequirementVoteWhereUniqueInput
    create: XOR<RequirementVoteCreateWithoutUserInput, RequirementVoteUncheckedCreateWithoutUserInput>
  }

  export type RequirementVoteCreateManyUserInputEnvelope = {
    data: Enumerable<RequirementVoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ColorschemeUpsertWithoutUsersInput = {
    update: XOR<ColorschemeUpdateWithoutUsersInput, ColorschemeUncheckedUpdateWithoutUsersInput>
    create: XOR<ColorschemeCreateWithoutUsersInput, ColorschemeUncheckedCreateWithoutUsersInput>
  }

  export type ColorschemeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorschemeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    update: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    data: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
  }

  export type ProblemUpdateManyWithWhereWithoutUserInput = {
    where: ProblemScalarWhereInput
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyWithoutProblemsInput>
  }

  export type ProblemScalarWhereInput = {
    AND?: Enumerable<ProblemScalarWhereInput>
    OR?: Enumerable<ProblemScalarWhereInput>
    NOT?: Enumerable<ProblemScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    desc?: StringFilter | string
    language?: EnumLanguageNullableFilter | Language | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SolutionUpsertWithWhereUniqueWithoutUserInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutUserInput, SolutionUncheckedUpdateWithoutUserInput>
    create: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutUserInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutUserInput, SolutionUncheckedUpdateWithoutUserInput>
  }

  export type SolutionUpdateManyWithWhereWithoutUserInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutSolutionsInput>
  }

  export type SolutionScalarWhereInput = {
    AND?: Enumerable<SolutionScalarWhereInput>
    OR?: Enumerable<SolutionScalarWhereInput>
    NOT?: Enumerable<SolutionScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    problemId?: StringFilter | string
    markedBest?: BoolFilter | boolean
    language?: EnumLanguageFilter | Language
    content?: StringFilter | string
    publish?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type RequirementUpsertWithWhereUniqueWithoutUserInput = {
    where: RequirementWhereUniqueInput
    update: XOR<RequirementUpdateWithoutUserInput, RequirementUncheckedUpdateWithoutUserInput>
    create: XOR<RequirementCreateWithoutUserInput, RequirementUncheckedCreateWithoutUserInput>
  }

  export type RequirementUpdateWithWhereUniqueWithoutUserInput = {
    where: RequirementWhereUniqueInput
    data: XOR<RequirementUpdateWithoutUserInput, RequirementUncheckedUpdateWithoutUserInput>
  }

  export type RequirementUpdateManyWithWhereWithoutUserInput = {
    where: RequirementScalarWhereInput
    data: XOR<RequirementUpdateManyMutationInput, RequirementUncheckedUpdateManyWithoutRequirementsInput>
  }

  export type RequirementScalarWhereInput = {
    AND?: Enumerable<RequirementScalarWhereInput>
    OR?: Enumerable<RequirementScalarWhereInput>
    NOT?: Enumerable<RequirementScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    description?: StringFilter | string
  }

  export type ProblemVoteUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemVoteWhereUniqueInput
    update: XOR<ProblemVoteUpdateWithoutUserInput, ProblemVoteUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemVoteCreateWithoutUserInput, ProblemVoteUncheckedCreateWithoutUserInput>
  }

  export type ProblemVoteUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemVoteWhereUniqueInput
    data: XOR<ProblemVoteUpdateWithoutUserInput, ProblemVoteUncheckedUpdateWithoutUserInput>
  }

  export type ProblemVoteUpdateManyWithWhereWithoutUserInput = {
    where: ProblemVoteScalarWhereInput
    data: XOR<ProblemVoteUpdateManyMutationInput, ProblemVoteUncheckedUpdateManyWithoutProblemVotesInput>
  }

  export type ProblemVoteScalarWhereInput = {
    AND?: Enumerable<ProblemVoteScalarWhereInput>
    OR?: Enumerable<ProblemVoteScalarWhereInput>
    NOT?: Enumerable<ProblemVoteScalarWhereInput>
    id?: StringFilter | string
    problemId?: StringFilter | string
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SolutionVoteUpsertWithWhereUniqueWithoutUserInput = {
    where: SolutionVoteWhereUniqueInput
    update: XOR<SolutionVoteUpdateWithoutUserInput, SolutionVoteUncheckedUpdateWithoutUserInput>
    create: XOR<SolutionVoteCreateWithoutUserInput, SolutionVoteUncheckedCreateWithoutUserInput>
  }

  export type SolutionVoteUpdateWithWhereUniqueWithoutUserInput = {
    where: SolutionVoteWhereUniqueInput
    data: XOR<SolutionVoteUpdateWithoutUserInput, SolutionVoteUncheckedUpdateWithoutUserInput>
  }

  export type SolutionVoteUpdateManyWithWhereWithoutUserInput = {
    where: SolutionVoteScalarWhereInput
    data: XOR<SolutionVoteUpdateManyMutationInput, SolutionVoteUncheckedUpdateManyWithoutSolutionVotesInput>
  }

  export type SolutionVoteScalarWhereInput = {
    AND?: Enumerable<SolutionVoteScalarWhereInput>
    OR?: Enumerable<SolutionVoteScalarWhereInput>
    NOT?: Enumerable<SolutionVoteScalarWhereInput>
    id?: StringFilter | string
    solutionId?: StringFilter | string
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type RequirementVoteUpsertWithWhereUniqueWithoutUserInput = {
    where: RequirementVoteWhereUniqueInput
    update: XOR<RequirementVoteUpdateWithoutUserInput, RequirementVoteUncheckedUpdateWithoutUserInput>
    create: XOR<RequirementVoteCreateWithoutUserInput, RequirementVoteUncheckedCreateWithoutUserInput>
  }

  export type RequirementVoteUpdateWithWhereUniqueWithoutUserInput = {
    where: RequirementVoteWhereUniqueInput
    data: XOR<RequirementVoteUpdateWithoutUserInput, RequirementVoteUncheckedUpdateWithoutUserInput>
  }

  export type RequirementVoteUpdateManyWithWhereWithoutUserInput = {
    where: RequirementVoteScalarWhereInput
    data: XOR<RequirementVoteUpdateManyMutationInput, RequirementVoteUncheckedUpdateManyWithoutRequirementVotesInput>
  }

  export type RequirementVoteScalarWhereInput = {
    AND?: Enumerable<RequirementVoteScalarWhereInput>
    OR?: Enumerable<RequirementVoteScalarWhereInput>
    NOT?: Enumerable<RequirementVoteScalarWhereInput>
    id?: StringFilter | string
    requirementId?: StringFilter | string
    userId?: StringFilter | string
    value?: EnumVoteValueFilter | VoteValue
    comment?: StringNullableFilter | string | null
    identifiers?: EnumSolutionIdentifierNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutProblemsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProblemsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProblemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
  }

  export type SolutionCreateWithoutProblemInput = {
    id?: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSolutionsInput
    votes?: SolutionVoteCreateNestedManyWithoutSolutionInput
  }

  export type SolutionUncheckedCreateWithoutProblemInput = {
    id?: string
    userId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: SolutionVoteUncheckedCreateNestedManyWithoutSolutionInput
  }

  export type SolutionCreateOrConnectWithoutProblemInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutProblemInput, SolutionUncheckedCreateWithoutProblemInput>
  }

  export type SolutionCreateManyProblemInputEnvelope = {
    data: Enumerable<SolutionCreateManyProblemInput>
    skipDuplicates?: boolean
  }

  export type ProblemTagCreateWithoutProblemInput = {
    id?: string
    tag: TagCreateNestedOneWithoutProblemsInput
  }

  export type ProblemTagUncheckedCreateWithoutProblemInput = {
    id?: string
    tagId: string
  }

  export type ProblemTagCreateOrConnectWithoutProblemInput = {
    where: ProblemTagWhereUniqueInput
    create: XOR<ProblemTagCreateWithoutProblemInput, ProblemTagUncheckedCreateWithoutProblemInput>
  }

  export type ProblemTagCreateManyProblemInputEnvelope = {
    data: Enumerable<ProblemTagCreateManyProblemInput>
    skipDuplicates?: boolean
  }

  export type ProblemVoteCreateWithoutProblemInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    user: UserCreateNestedOneWithoutProblemVotesInput
  }

  export type ProblemVoteUncheckedCreateWithoutProblemInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteCreateOrConnectWithoutProblemInput = {
    where: ProblemVoteWhereUniqueInput
    create: XOR<ProblemVoteCreateWithoutProblemInput, ProblemVoteUncheckedCreateWithoutProblemInput>
  }

  export type ProblemVoteCreateManyProblemInputEnvelope = {
    data: Enumerable<ProblemVoteCreateManyProblemInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProblemsInput = {
    update: XOR<UserUpdateWithoutProblemsInput, UserUncheckedUpdateWithoutProblemsInput>
    create: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
  }

  export type UserUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type SolutionUpsertWithWhereUniqueWithoutProblemInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutProblemInput, SolutionUncheckedUpdateWithoutProblemInput>
    create: XOR<SolutionCreateWithoutProblemInput, SolutionUncheckedCreateWithoutProblemInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutProblemInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutProblemInput, SolutionUncheckedUpdateWithoutProblemInput>
  }

  export type SolutionUpdateManyWithWhereWithoutProblemInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutSolutionsInput>
  }

  export type ProblemTagUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemTagWhereUniqueInput
    update: XOR<ProblemTagUpdateWithoutProblemInput, ProblemTagUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemTagCreateWithoutProblemInput, ProblemTagUncheckedCreateWithoutProblemInput>
  }

  export type ProblemTagUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemTagWhereUniqueInput
    data: XOR<ProblemTagUpdateWithoutProblemInput, ProblemTagUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemTagUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemTagScalarWhereInput
    data: XOR<ProblemTagUpdateManyMutationInput, ProblemTagUncheckedUpdateManyWithoutTagsInput>
  }

  export type ProblemTagScalarWhereInput = {
    AND?: Enumerable<ProblemTagScalarWhereInput>
    OR?: Enumerable<ProblemTagScalarWhereInput>
    NOT?: Enumerable<ProblemTagScalarWhereInput>
    id?: StringFilter | string
    problemId?: StringFilter | string
    tagId?: StringFilter | string
  }

  export type ProblemVoteUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemVoteWhereUniqueInput
    update: XOR<ProblemVoteUpdateWithoutProblemInput, ProblemVoteUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemVoteCreateWithoutProblemInput, ProblemVoteUncheckedCreateWithoutProblemInput>
  }

  export type ProblemVoteUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemVoteWhereUniqueInput
    data: XOR<ProblemVoteUpdateWithoutProblemInput, ProblemVoteUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemVoteUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemVoteScalarWhereInput
    data: XOR<ProblemVoteUpdateManyMutationInput, ProblemVoteUncheckedUpdateManyWithoutVotesInput>
  }

  export type UserCreateWithoutRequirementsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequirementsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequirementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequirementsInput, UserUncheckedCreateWithoutRequirementsInput>
  }

  export type RequirementTagCreateWithoutRequirementInput = {
    id?: string
    tag: TagCreateNestedOneWithoutRequirementsInput
  }

  export type RequirementTagUncheckedCreateWithoutRequirementInput = {
    id?: string
    tagId: string
  }

  export type RequirementTagCreateOrConnectWithoutRequirementInput = {
    where: RequirementTagWhereUniqueInput
    create: XOR<RequirementTagCreateWithoutRequirementInput, RequirementTagUncheckedCreateWithoutRequirementInput>
  }

  export type RequirementTagCreateManyRequirementInputEnvelope = {
    data: Enumerable<RequirementTagCreateManyRequirementInput>
    skipDuplicates?: boolean
  }

  export type RequirementVoteCreateWithoutRequirementInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    user: UserCreateNestedOneWithoutRequirementVotesInput
  }

  export type RequirementVoteUncheckedCreateWithoutRequirementInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateOrConnectWithoutRequirementInput = {
    where: RequirementVoteWhereUniqueInput
    create: XOR<RequirementVoteCreateWithoutRequirementInput, RequirementVoteUncheckedCreateWithoutRequirementInput>
  }

  export type RequirementVoteCreateManyRequirementInputEnvelope = {
    data: Enumerable<RequirementVoteCreateManyRequirementInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRequirementsInput = {
    update: XOR<UserUpdateWithoutRequirementsInput, UserUncheckedUpdateWithoutRequirementsInput>
    create: XOR<UserCreateWithoutRequirementsInput, UserUncheckedCreateWithoutRequirementsInput>
  }

  export type UserUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type RequirementTagUpsertWithWhereUniqueWithoutRequirementInput = {
    where: RequirementTagWhereUniqueInput
    update: XOR<RequirementTagUpdateWithoutRequirementInput, RequirementTagUncheckedUpdateWithoutRequirementInput>
    create: XOR<RequirementTagCreateWithoutRequirementInput, RequirementTagUncheckedCreateWithoutRequirementInput>
  }

  export type RequirementTagUpdateWithWhereUniqueWithoutRequirementInput = {
    where: RequirementTagWhereUniqueInput
    data: XOR<RequirementTagUpdateWithoutRequirementInput, RequirementTagUncheckedUpdateWithoutRequirementInput>
  }

  export type RequirementTagUpdateManyWithWhereWithoutRequirementInput = {
    where: RequirementTagScalarWhereInput
    data: XOR<RequirementTagUpdateManyMutationInput, RequirementTagUncheckedUpdateManyWithoutTagsInput>
  }

  export type RequirementTagScalarWhereInput = {
    AND?: Enumerable<RequirementTagScalarWhereInput>
    OR?: Enumerable<RequirementTagScalarWhereInput>
    NOT?: Enumerable<RequirementTagScalarWhereInput>
    id?: StringFilter | string
    requirementId?: StringFilter | string
    tagId?: StringFilter | string
  }

  export type RequirementVoteUpsertWithWhereUniqueWithoutRequirementInput = {
    where: RequirementVoteWhereUniqueInput
    update: XOR<RequirementVoteUpdateWithoutRequirementInput, RequirementVoteUncheckedUpdateWithoutRequirementInput>
    create: XOR<RequirementVoteCreateWithoutRequirementInput, RequirementVoteUncheckedCreateWithoutRequirementInput>
  }

  export type RequirementVoteUpdateWithWhereUniqueWithoutRequirementInput = {
    where: RequirementVoteWhereUniqueInput
    data: XOR<RequirementVoteUpdateWithoutRequirementInput, RequirementVoteUncheckedUpdateWithoutRequirementInput>
  }

  export type RequirementVoteUpdateManyWithWhereWithoutRequirementInput = {
    where: RequirementVoteScalarWhereInput
    data: XOR<RequirementVoteUpdateManyMutationInput, RequirementVoteUncheckedUpdateManyWithoutVotesInput>
  }

  export type RequirementTagCreateWithoutTagInput = {
    id?: string
    requirement: RequirementCreateNestedOneWithoutTagsInput
  }

  export type RequirementTagUncheckedCreateWithoutTagInput = {
    id?: string
    requirementId: string
  }

  export type RequirementTagCreateOrConnectWithoutTagInput = {
    where: RequirementTagWhereUniqueInput
    create: XOR<RequirementTagCreateWithoutTagInput, RequirementTagUncheckedCreateWithoutTagInput>
  }

  export type RequirementTagCreateManyTagInputEnvelope = {
    data: Enumerable<RequirementTagCreateManyTagInput>
    skipDuplicates?: boolean
  }

  export type ProblemTagCreateWithoutTagInput = {
    id?: string
    problem: ProblemCreateNestedOneWithoutTagsInput
  }

  export type ProblemTagUncheckedCreateWithoutTagInput = {
    id?: string
    problemId: string
  }

  export type ProblemTagCreateOrConnectWithoutTagInput = {
    where: ProblemTagWhereUniqueInput
    create: XOR<ProblemTagCreateWithoutTagInput, ProblemTagUncheckedCreateWithoutTagInput>
  }

  export type ProblemTagCreateManyTagInputEnvelope = {
    data: Enumerable<ProblemTagCreateManyTagInput>
    skipDuplicates?: boolean
  }

  export type RequirementTagUpsertWithWhereUniqueWithoutTagInput = {
    where: RequirementTagWhereUniqueInput
    update: XOR<RequirementTagUpdateWithoutTagInput, RequirementTagUncheckedUpdateWithoutTagInput>
    create: XOR<RequirementTagCreateWithoutTagInput, RequirementTagUncheckedCreateWithoutTagInput>
  }

  export type RequirementTagUpdateWithWhereUniqueWithoutTagInput = {
    where: RequirementTagWhereUniqueInput
    data: XOR<RequirementTagUpdateWithoutTagInput, RequirementTagUncheckedUpdateWithoutTagInput>
  }

  export type RequirementTagUpdateManyWithWhereWithoutTagInput = {
    where: RequirementTagScalarWhereInput
    data: XOR<RequirementTagUpdateManyMutationInput, RequirementTagUncheckedUpdateManyWithoutRequirementsInput>
  }

  export type ProblemTagUpsertWithWhereUniqueWithoutTagInput = {
    where: ProblemTagWhereUniqueInput
    update: XOR<ProblemTagUpdateWithoutTagInput, ProblemTagUncheckedUpdateWithoutTagInput>
    create: XOR<ProblemTagCreateWithoutTagInput, ProblemTagUncheckedCreateWithoutTagInput>
  }

  export type ProblemTagUpdateWithWhereUniqueWithoutTagInput = {
    where: ProblemTagWhereUniqueInput
    data: XOR<ProblemTagUpdateWithoutTagInput, ProblemTagUncheckedUpdateWithoutTagInput>
  }

  export type ProblemTagUpdateManyWithWhereWithoutTagInput = {
    where: ProblemTagScalarWhereInput
    data: XOR<ProblemTagUpdateManyMutationInput, ProblemTagUncheckedUpdateManyWithoutProblemsInput>
  }

  export type RequirementCreateWithoutTagsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    user: UserCreateNestedOneWithoutRequirementsInput
    votes?: RequirementVoteCreateNestedManyWithoutRequirementInput
  }

  export type RequirementUncheckedCreateWithoutTagsInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    votes?: RequirementVoteUncheckedCreateNestedManyWithoutRequirementInput
  }

  export type RequirementCreateOrConnectWithoutTagsInput = {
    where: RequirementWhereUniqueInput
    create: XOR<RequirementCreateWithoutTagsInput, RequirementUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutRequirementsInput = {
    id?: string
    name: string
    problems?: ProblemTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutRequirementsInput = {
    id?: string
    name: string
    problems?: ProblemTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutRequirementsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutRequirementsInput, TagUncheckedCreateWithoutRequirementsInput>
  }

  export type RequirementUpsertWithoutTagsInput = {
    update: XOR<RequirementUpdateWithoutTagsInput, RequirementUncheckedUpdateWithoutTagsInput>
    create: XOR<RequirementCreateWithoutTagsInput, RequirementUncheckedCreateWithoutTagsInput>
  }

  export type RequirementUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRequirementsInput
    votes?: RequirementVoteUpdateManyWithoutRequirementInput
  }

  export type RequirementUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    votes?: RequirementVoteUncheckedUpdateManyWithoutRequirementInput
  }

  export type TagUpsertWithoutRequirementsInput = {
    update: XOR<TagUpdateWithoutRequirementsInput, TagUncheckedUpdateWithoutRequirementsInput>
    create: XOR<TagCreateWithoutRequirementsInput, TagUncheckedCreateWithoutRequirementsInput>
  }

  export type TagUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problems?: ProblemTagUpdateManyWithoutTagInput
  }

  export type TagUncheckedUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    problems?: ProblemTagUncheckedUpdateManyWithoutTagInput
  }

  export type ProblemCreateWithoutTagsInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemsInput
    solutions?: SolutionCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutTagsInput = {
    id?: string
    userId: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solutions?: SolutionUncheckedCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutTagsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutTagsInput, ProblemUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutProblemsInput = {
    id?: string
    name: string
    requirements?: RequirementTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutProblemsInput = {
    id?: string
    name: string
    requirements?: RequirementTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutProblemsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutProblemsInput, TagUncheckedCreateWithoutProblemsInput>
  }

  export type ProblemUpsertWithoutTagsInput = {
    update: XOR<ProblemUpdateWithoutTagsInput, ProblemUncheckedUpdateWithoutTagsInput>
    create: XOR<ProblemCreateWithoutTagsInput, ProblemUncheckedCreateWithoutTagsInput>
  }

  export type ProblemUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemsInput
    solutions?: SolutionUpdateManyWithoutProblemInput
    votes?: ProblemVoteUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solutions?: SolutionUncheckedUpdateManyWithoutProblemInput
    votes?: ProblemVoteUncheckedUpdateManyWithoutProblemInput
  }

  export type TagUpsertWithoutProblemsInput = {
    update: XOR<TagUpdateWithoutProblemsInput, TagUncheckedUpdateWithoutProblemsInput>
    create: XOR<TagCreateWithoutProblemsInput, TagUncheckedCreateWithoutProblemsInput>
  }

  export type TagUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirements?: RequirementTagUpdateManyWithoutTagInput
  }

  export type TagUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirements?: RequirementTagUncheckedUpdateManyWithoutTagInput
  }

  export type UserCreateWithoutSolutionsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSolutionsInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSolutionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
  }

  export type ProblemCreateWithoutSolutionsInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemsInput
    tags?: ProblemTagCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutSolutionsInput = {
    id?: string
    userId: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: ProblemTagUncheckedCreateNestedManyWithoutProblemInput
    votes?: ProblemVoteUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutSolutionsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
  }

  export type SolutionVoteCreateWithoutSolutionInput = {
    id?: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
    user: UserCreateNestedOneWithoutSolutionVotesInput
  }

  export type SolutionVoteUncheckedCreateWithoutSolutionInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteCreateOrConnectWithoutSolutionInput = {
    where: SolutionVoteWhereUniqueInput
    create: XOR<SolutionVoteCreateWithoutSolutionInput, SolutionVoteUncheckedCreateWithoutSolutionInput>
  }

  export type SolutionVoteCreateManySolutionInputEnvelope = {
    data: Enumerable<SolutionVoteCreateManySolutionInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSolutionsInput = {
    update: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
  }

  export type UserUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type ProblemUpsertWithoutSolutionsInput = {
    update: XOR<ProblemUpdateWithoutSolutionsInput, ProblemUncheckedUpdateWithoutSolutionsInput>
    create: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
  }

  export type ProblemUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemsInput
    tags?: ProblemTagUpdateManyWithoutProblemInput
    votes?: ProblemVoteUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: ProblemTagUncheckedUpdateManyWithoutProblemInput
    votes?: ProblemVoteUncheckedUpdateManyWithoutProblemInput
  }

  export type SolutionVoteUpsertWithWhereUniqueWithoutSolutionInput = {
    where: SolutionVoteWhereUniqueInput
    update: XOR<SolutionVoteUpdateWithoutSolutionInput, SolutionVoteUncheckedUpdateWithoutSolutionInput>
    create: XOR<SolutionVoteCreateWithoutSolutionInput, SolutionVoteUncheckedCreateWithoutSolutionInput>
  }

  export type SolutionVoteUpdateWithWhereUniqueWithoutSolutionInput = {
    where: SolutionVoteWhereUniqueInput
    data: XOR<SolutionVoteUpdateWithoutSolutionInput, SolutionVoteUncheckedUpdateWithoutSolutionInput>
  }

  export type SolutionVoteUpdateManyWithWhereWithoutSolutionInput = {
    where: SolutionVoteScalarWhereInput
    data: XOR<SolutionVoteUpdateManyMutationInput, SolutionVoteUncheckedUpdateManyWithoutVotesInput>
  }

  export type SolutionCreateWithoutVotesInput = {
    id?: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSolutionsInput
    problem: ProblemCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateWithoutVotesInput = {
    id?: string
    userId: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SolutionCreateOrConnectWithoutVotesInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutVotesInput, SolutionUncheckedCreateWithoutVotesInput>
  }

  export type UserCreateWithoutSolutionVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSolutionVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSolutionVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSolutionVotesInput, UserUncheckedCreateWithoutSolutionVotesInput>
  }

  export type SolutionUpsertWithoutVotesInput = {
    update: XOR<SolutionUpdateWithoutVotesInput, SolutionUncheckedUpdateWithoutVotesInput>
    create: XOR<SolutionCreateWithoutVotesInput, SolutionUncheckedCreateWithoutVotesInput>
  }

  export type SolutionUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSolutionsInput
    problem?: ProblemUpdateOneRequiredWithoutSolutionsInput
  }

  export type SolutionUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSolutionVotesInput = {
    update: XOR<UserUpdateWithoutSolutionVotesInput, UserUncheckedUpdateWithoutSolutionVotesInput>
    create: XOR<UserCreateWithoutSolutionVotesInput, UserUncheckedCreateWithoutSolutionVotesInput>
  }

  export type UserUpdateWithoutSolutionVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSolutionVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type ProblemCreateWithoutVotesInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemsInput
    solutions?: SolutionCreateNestedManyWithoutProblemInput
    tags?: ProblemTagCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutVotesInput = {
    id?: string
    userId: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solutions?: SolutionUncheckedCreateNestedManyWithoutProblemInput
    tags?: ProblemTagUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutVotesInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutVotesInput, ProblemUncheckedCreateWithoutVotesInput>
  }

  export type UserCreateWithoutProblemVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProblemVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProblemVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProblemVotesInput, UserUncheckedCreateWithoutProblemVotesInput>
  }

  export type ProblemUpsertWithoutVotesInput = {
    update: XOR<ProblemUpdateWithoutVotesInput, ProblemUncheckedUpdateWithoutVotesInput>
    create: XOR<ProblemCreateWithoutVotesInput, ProblemUncheckedCreateWithoutVotesInput>
  }

  export type ProblemUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemsInput
    solutions?: SolutionUpdateManyWithoutProblemInput
    tags?: ProblemTagUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solutions?: SolutionUncheckedUpdateManyWithoutProblemInput
    tags?: ProblemTagUncheckedUpdateManyWithoutProblemInput
  }

  export type UserUpsertWithoutProblemVotesInput = {
    update: XOR<UserUpdateWithoutProblemVotesInput, UserUncheckedUpdateWithoutProblemVotesInput>
    create: XOR<UserCreateWithoutProblemVotesInput, UserUncheckedCreateWithoutProblemVotesInput>
  }

  export type UserUpdateWithoutProblemVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProblemVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type RequirementCreateWithoutVotesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    user: UserCreateNestedOneWithoutRequirementsInput
    tags?: RequirementTagCreateNestedManyWithoutRequirementInput
  }

  export type RequirementUncheckedCreateWithoutVotesInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    tags?: RequirementTagUncheckedCreateNestedManyWithoutRequirementInput
  }

  export type RequirementCreateOrConnectWithoutVotesInput = {
    where: RequirementWhereUniqueInput
    create: XOR<RequirementCreateWithoutVotesInput, RequirementUncheckedCreateWithoutVotesInput>
  }

  export type UserCreateWithoutRequirementVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    colorscheme: ColorschemeCreateNestedOneWithoutUsersInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequirementVotesInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    colorschemeId: string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequirementVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequirementVotesInput, UserUncheckedCreateWithoutRequirementVotesInput>
  }

  export type RequirementUpsertWithoutVotesInput = {
    update: XOR<RequirementUpdateWithoutVotesInput, RequirementUncheckedUpdateWithoutVotesInput>
    create: XOR<RequirementCreateWithoutVotesInput, RequirementUncheckedCreateWithoutVotesInput>
  }

  export type RequirementUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRequirementsInput
    tags?: RequirementTagUpdateManyWithoutRequirementInput
  }

  export type RequirementUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: RequirementTagUncheckedUpdateManyWithoutRequirementInput
  }

  export type UserUpsertWithoutRequirementVotesInput = {
    update: XOR<UserUpdateWithoutRequirementVotesInput, UserUncheckedUpdateWithoutRequirementVotesInput>
    create: XOR<UserCreateWithoutRequirementVotesInput, UserUncheckedCreateWithoutRequirementVotesInput>
  }

  export type UserUpdateWithoutRequirementVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    colorscheme?: ColorschemeUpdateOneRequiredWithoutUsersInput
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRequirementVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorschemeId?: StringFieldUpdateOperationsInput | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutColorschemeInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    problems?: ProblemCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
    requirements?: RequirementCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutColorschemeInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
    requirements?: RequirementUncheckedCreateNestedManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedCreateNestedManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedCreateNestedManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutColorschemeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutColorschemeInput, UserUncheckedCreateWithoutColorschemeInput>
  }

  export type UserCreateManyColorschemeInputEnvelope = {
    data: Enumerable<UserCreateManyColorschemeInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutColorschemeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutColorschemeInput, UserUncheckedUpdateWithoutColorschemeInput>
    create: XOR<UserCreateWithoutColorschemeInput, UserUncheckedCreateWithoutColorschemeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutColorschemeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutColorschemeInput, UserUncheckedUpdateWithoutColorschemeInput>
  }

  export type UserUpdateManyWithWhereWithoutColorschemeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    created?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    colorschemeId?: StringFilter | string
    siteMode?: EnumSiteModeFilter | SiteMode
  }

  export type ProblemCreateManyUserInput = {
    id?: string
    desc: string
    language?: Language | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SolutionCreateManyUserInput = {
    id?: string
    problemId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequirementCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
  }

  export type ProblemVoteCreateManyUserInput = {
    id?: string
    problemId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteCreateManyUserInput = {
    id?: string
    solutionId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteCreateManyUserInput = {
    id?: string
    requirementId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solutions?: SolutionUpdateManyWithoutProblemInput
    tags?: ProblemTagUpdateManyWithoutProblemInput
    votes?: ProblemVoteUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solutions?: SolutionUncheckedUpdateManyWithoutProblemInput
    tags?: ProblemTagUncheckedUpdateManyWithoutProblemInput
    votes?: ProblemVoteUncheckedUpdateManyWithoutProblemInput
  }

  export type ProblemUncheckedUpdateManyWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    language?: NullableEnumLanguageFieldUpdateOperationsInput | Language | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SolutionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutSolutionsInput
    votes?: SolutionVoteUpdateManyWithoutSolutionInput
  }

  export type SolutionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: SolutionVoteUncheckedUpdateManyWithoutSolutionInput
  }

  export type SolutionUncheckedUpdateManyWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequirementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: RequirementTagUpdateManyWithoutRequirementInput
    votes?: RequirementVoteUpdateManyWithoutRequirementInput
  }

  export type RequirementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    tags?: RequirementTagUncheckedUpdateManyWithoutRequirementInput
    votes?: RequirementVoteUncheckedUpdateManyWithoutRequirementInput
  }

  export type RequirementUncheckedUpdateManyWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemVoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    problem?: ProblemUpdateOneRequiredWithoutVotesInput
  }

  export type ProblemVoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteUncheckedUpdateManyWithoutProblemVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    solution?: SolutionUpdateOneRequiredWithoutVotesInput
  }

  export type SolutionVoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    solutionId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUncheckedUpdateManyWithoutSolutionVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    solutionId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    requirement?: RequirementUpdateOneRequiredWithoutVotesInput
  }

  export type RequirementVoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUncheckedUpdateManyWithoutRequirementVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionCreateManyProblemInput = {
    id?: string
    userId: string
    markedBest: boolean
    language: Language
    content: string
    publish?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemTagCreateManyProblemInput = {
    id?: string
    tagId: string
  }

  export type ProblemVoteCreateManyProblemInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: ProblemVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSolutionsInput
    votes?: SolutionVoteUpdateManyWithoutSolutionInput
  }

  export type SolutionUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    markedBest?: BoolFieldUpdateOperationsInput | boolean
    language?: EnumLanguageFieldUpdateOperationsInput | Language
    content?: StringFieldUpdateOperationsInput | string
    publish?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: SolutionVoteUncheckedUpdateManyWithoutSolutionInput
  }

  export type ProblemTagUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutProblemsInput
  }

  export type ProblemTagUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemVoteUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    user?: UserUpdateOneRequiredWithoutProblemVotesInput
  }

  export type ProblemVoteUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type ProblemVoteUncheckedUpdateManyWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: ProblemVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementTagCreateManyRequirementInput = {
    id?: string
    tagId: string
  }

  export type RequirementVoteCreateManyRequirementInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: RequirementVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementTagUpdateWithoutRequirementInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutRequirementsInput
  }

  export type RequirementTagUncheckedUpdateWithoutRequirementInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementTagUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementVoteUpdateWithoutRequirementInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    user?: UserUpdateOneRequiredWithoutRequirementVotesInput
  }

  export type RequirementVoteUncheckedUpdateWithoutRequirementInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementVoteUncheckedUpdateManyWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: RequirementVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type RequirementTagCreateManyTagInput = {
    id?: string
    requirementId: string
  }

  export type ProblemTagCreateManyTagInput = {
    id?: string
    problemId: string
  }

  export type RequirementTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirement?: RequirementUpdateOneRequiredWithoutTagsInput
  }

  export type RequirementTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
  }

  export type RequirementTagUncheckedUpdateManyWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requirementId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    problem?: ProblemUpdateOneRequiredWithoutTagsInput
  }

  export type ProblemTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemTagUncheckedUpdateManyWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionVoteCreateManySolutionInput = {
    id?: string
    userId: string
    value: VoteValue
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    identifiers?: SolutionVoteCreateManyidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUpdateWithoutSolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
    user?: UserUpdateOneRequiredWithoutSolutionVotesInput
  }

  export type SolutionVoteUncheckedUpdateWithoutSolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type SolutionVoteUncheckedUpdateManyWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    value?: EnumVoteValueFieldUpdateOperationsInput | VoteValue
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identifiers?: SolutionVoteUpdateidentifiersInput | Enumerable<SolutionIdentifier>
  }

  export type UserCreateManyColorschemeInput = {
    id?: string
    email: string
    username: string
    password: string
    name: string
    image?: string | null
    created?: Date | string
    updatedAt?: Date | string
    siteMode: SiteMode
  }

  export type UserUpdateWithoutColorschemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUpdateManyWithoutUserInput
    solutions?: SolutionUpdateManyWithoutUserInput
    requirements?: RequirementUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutColorschemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
    problems?: ProblemUncheckedUpdateManyWithoutUserInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserInput
    requirements?: RequirementUncheckedUpdateManyWithoutUserInput
    problemVotes?: ProblemVoteUncheckedUpdateManyWithoutUserInput
    solutionVotes?: SolutionVoteUncheckedUpdateManyWithoutUserInput
    requirementVotes?: RequirementVoteUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteMode?: EnumSiteModeFieldUpdateOperationsInput | SiteMode
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}