
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  name: 'name',
  image: 'image',
  created: 'created',
  updatedAt: 'updatedAt',
  colorschemeId: 'colorschemeId',
  siteMode: 'siteMode'
});

exports.Prisma.ProblemScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  desc: 'desc',
  language: 'language',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RequirementScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  description: 'description'
});

exports.Prisma.TagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.RequirementTagScalarFieldEnum = makeEnum({
  id: 'id',
  requirementId: 'requirementId',
  tagId: 'tagId'
});

exports.Prisma.ProblemTagScalarFieldEnum = makeEnum({
  id: 'id',
  problemId: 'problemId',
  tagId: 'tagId'
});

exports.Prisma.SolutionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  problemId: 'problemId',
  markedBest: 'markedBest',
  language: 'language',
  content: 'content',
  publish: 'publish',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SolutionVoteScalarFieldEnum = makeEnum({
  id: 'id',
  solutionId: 'solutionId',
  userId: 'userId',
  value: 'value',
  comment: 'comment',
  identifiers: 'identifiers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProblemVoteScalarFieldEnum = makeEnum({
  id: 'id',
  problemId: 'problemId',
  userId: 'userId',
  value: 'value',
  comment: 'comment',
  identifiers: 'identifiers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RequirementVoteScalarFieldEnum = makeEnum({
  id: 'id',
  requirementId: 'requirementId',
  userId: 'userId',
  value: 'value',
  comment: 'comment',
  identifiers: 'identifiers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ColorschemeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.SiteMode = makeEnum({
  Light: 'Light',
  Dark: 'Dark'
});

exports.Language = makeEnum({
  Rust: 'Rust',
  Zig: 'Zig',
  Nim: 'Nim',
  Cpp: 'Cpp',
  C: 'C',
  JavaScript: 'JavaScript',
  TypeScript: 'TypeScript',
  Python: 'Python'
});

exports.VoteValue = makeEnum({
  Like: 'Like',
  Dislike: 'Dislike'
});

exports.SolutionIdentifier = makeEnum({
  Unique: 'Unique',
  Efficient: 'Efficient',
  Naive: 'Naive',
  BruteForce: 'BruteForce',
  Performant: 'Performant'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Problem: 'Problem',
  Requirement: 'Requirement',
  Tag: 'Tag',
  RequirementTag: 'RequirementTag',
  ProblemTag: 'ProblemTag',
  Solution: 'Solution',
  SolutionVote: 'SolutionVote',
  ProblemVote: 'ProblemVote',
  RequirementVote: 'RequirementVote',
  Colorscheme: 'Colorscheme'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
